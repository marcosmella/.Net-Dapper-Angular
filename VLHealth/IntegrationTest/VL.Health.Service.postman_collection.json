{
	"info": {
		"_postman_id": "ab108381-ad32-4155-829d-a7731908d3a2",
		"name": "VL.Health.Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "100.Token",
			"item": [
				{
					"name": "100.2.Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"Autenticacion\", data.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Autenticacion}}"
							},
							{
								"key": "X-Tenant-Id",
								"type": "text",
								"value": "{{Tenant}}"
							},
							{
								"key": "username",
								"value": "webapi",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "suipacha",
								"type": "text",
								"disabled": true
							},
							{
								"key": "grant_type",
								"value": "password",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "webapi",
									"type": "text"
								},
								{
									"key": "password",
									"value": "suipacha",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{webapi}}",
							"host": [
								"{{webapi}}"
							]
						},
						"description": "Recupera el token de la webapi"
					},
					"response": []
				}
			]
		},
		{
			"name": "102.Accidents",
			"item": [
				{
					"name": "102.1.MedicalProvider",
					"item": [
						{
							"name": "102.1.1.MedicalProvider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Medical Provider Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/medical-providers",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"medical-providers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.2.NotificationDischargeChannel",
					"item": [
						{
							"name": "102.2.1.NotificationDischargeChannel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Discharge Channel Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/notification-discharge-channels",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"notification-discharge-channels"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.3.Pathology",
					"item": [
						{
							"name": "102.3.1.Pathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"pathologies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.4.Types",
					"item": [
						{
							"name": "102.4.1.Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.5.Complainant",
					"item": [
						{
							"name": "102.5.1.Complainant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/complainants",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"complainants"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.6.ComplainantChannel",
					"item": [
						{
							"name": "102.6.1.ComplainantChannel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/complaint-channels",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"complaint-channels"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.7.InsuranceCompany",
					"item": [
						{
							"name": "102.7.1.InsuranceCompany",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/insurance-companies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"insurance-companies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.8.Status",
					"item": [
						{
							"name": "102.8.1.Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/statuses",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"statuses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "102.9.Reopening",
					"item": [
						{
							"name": "102.9.1.Reopening",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/accidents/reopenings",
									"host": [
										"{{URI}}"
									],
									"path": [
										"accidents",
										"reopenings"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "103.General",
			"item": [
				{
					"name": "103.1.BloodPressure",
					"item": [
						{
							"name": "103.1.1.BloodPressure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Blood Pressure Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/blood-pressures",
									"host": [
										"{{URI}}"
									],
									"path": [
										"blood-pressures"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "103.2.BloodType",
					"item": [
						{
							"name": "103.2.1.BloodType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"description\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"pm.test('Blood Types Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/blood-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"blood-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "103.3.Doctor",
					"item": [
						{
							"name": "103.3.0.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
											"var schema = {",
											"\t\"items\":{",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"            \"firstName\": { \"type\": \"string\" },",
											"            \"lastName\": { \"type\": \"string\" },",
											"            \"enrollment\": { \"type\": \"string\" },",
											"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
											"            \"documentNumber\": { \"type\": \"string\" },",
											"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", \"firstName\"],",
											"\t\t\"additionalProperties\": false",
											"}",
											"};",
											"",
											"",
											"pm.test('Doctor Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/doctors",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.1.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDDoctors\",responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"firstName\": \"Postman\",\r\n  \"lastName\": \"Automation\",\r\n  \"enrollment\": \"Mat1564\",\r\n  \"enrollmentExpirationDate\": \"2031-06-28T00:00:00Z\",\r\n  \"documentNumber\": \"12457836\",\r\n  \"documentExpirationDate\": \"2031-06-28T00:00:00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/doctors",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.2.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var id = postman.getEnvironmentVariable(\"IDDoctors\");",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"origin\": { \"type\": \"string\" },",
											"\t\t\t\"objectType\": { \"type\": [\"string\" ,\"null\"] },",
											"\t\t\t\"json\": { \"type\": \"string\" },\t\t\t",
											"\t\t\t\"previousJson\": { \"type\": [\"string\" ,\"null\"]},",
											"\t\t\t\"userName\": { \"type\": \"string\" },",
											"\t\t\t\"creation\": { \"type\": \"string\" },",
											"\t\t\t\"verb\": { \"type\": \"string\" },",
											"\t\t\t\"idObject\": { \"type\": \"number\" },",
											"\t\t\t\"idEntityParent\": { \"type\": [\"number\" ,\"null\"]},",
											"\t\t\t\"idEntityTypeParent\": { \"type\":[\"number\" ,\"null\"]},\t",
											"        },",
											"\t\t\"required\": [\"id\", \"origin\", \"objectType\", \"json\",\"previousJson\",\"userName\",\"creation\",\"verb\",\"idObject\",\"idEntityParent\",\"idEntityTypeParent\"],",
											"\t\t\"additionalProperties\": false",
											"\t}",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"Doctor\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\"+id+\",\\\"FirstName\\\":\\\"Postman\\\",\\\"LastName\\\":\\\"Automation\\\",\\\"Enrollment\\\":\\\"Mat1564\\\",\\\"EnrollmentExpirationDate\\\":\\\"2031-06-28T00:00:00Z\\\",\\\"DocumentNumber\\\":\\\"12457836\\\",\\\"DocumentExpirationDate\\\":\\\"2031-06-28T00:00:00Z\\\"}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObject={{IDDoctors}}&IdObjectType=57",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDDoctors}}"
										},
										{
											"key": "IdObjectType",
											"value": "57"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.3.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"firstName\": { \"type\": \"string\" },",
											"        \"lastName\": { \"type\": \"string\" },",
											"        \"enrollment\": { \"type\": \"string\" },",
											"        \"enrollmentExpirationDate\": { \"type\": \"string\" },",
											"        \"documentNumber\": { \"type\": \"string\" },",
											"        \"documentExpirationDate\": { \"type\": \"string\" },",
											"    },",
											"    \"required\": [\"id\", \"firstName\"],",
											"    \"additionalProperties\": false",
											"",
											"};",
											"",
											"",
											"pm.test('Doctor Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify firstName\", function () {",
											"    pm.expect(jsonData.firstName).is.to.equal(\"Postman\");",
											"});",
											"",
											"pm.test(\"Verify lastName\", function () {",
											"    pm.expect(jsonData.lastName).is.to.equal(\"Automation\");",
											"});",
											"",
											"pm.test(\"Verify enrollment\", function () {",
											"    pm.expect(jsonData.enrollment).is.to.equal(\"Mat1564\");",
											"});",
											"",
											"pm.test(\"Verify enrollmentExpirationDate\", function () {",
											"    pm.expect(jsonData.enrollmentExpirationDate).is.to.equal(\"2031-06-28T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify documentNumber\", function () {",
											"    pm.expect(jsonData.documentNumber).is.to.equal(\"12457836\");",
											"});",
											"",
											"pm.test(\"Verify documentExpirationDate\", function () {",
											"    pm.expect(jsonData.documentExpirationDate).is.to.equal(\"2031-06-28T00:00:00\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/doctors/{{IDDoctors}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors",
										"{{IDDoctors}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.4.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{IDDoctors}},\r\n  \"firstName\": \"Postman2\",\r\n  \"lastName\": \"Automation2\",\r\n  \"enrollment\": \"Mat15642\",\r\n  \"enrollmentExpirationDate\": null,\r\n  \"documentNumber\": \"124578362\",\r\n  \"documentExpirationDate\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/doctors",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.5.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var id = postman.getEnvironmentVariable(\"IDDoctors\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"Doctor\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + id + \",\\\"FirstName\\\":\\\"Postman2\\\",\\\"LastName\\\":\\\"Automation2\\\",\\\"Enrollment\\\":\\\"Mat15642\\\",\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":\\\"124578362\\\",\\\"DocumentExpirationDate\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?IdObjectType=57&UserName=webapi&Verb=PUT&IdObject={{IDDoctors}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "IdObjectType",
											"value": "57"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDDoctors}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.6.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"firstName\": { \"type\": \"string\" },",
											"        \"lastName\": { \"type\": \"string\" },",
											"        \"enrollment\": { \"type\": \"string\" },",
											"        \"enrollmentExpirationDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"documentNumber\": { \"type\": \"string\" },",
											"        \"documentExpirationDate\": { \"type\": [\"string\", \"null\"] },",
											"    },",
											"    \"required\": [\"id\", \"firstName\"],",
											"    \"additionalProperties\": false",
											"",
											"};",
											"",
											"",
											"",
											"pm.test('Doctor Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify firstName\", function () {",
											"    pm.expect(jsonData.firstName).is.to.equal(\"Postman2\");",
											"});",
											"",
											"pm.test(\"Verify lastName\", function () {",
											"    pm.expect(jsonData.lastName).is.to.equal(\"Automation2\");",
											"});",
											"",
											"pm.test(\"Verify enrollment\", function () {",
											"    pm.expect(jsonData.enrollment).is.to.equal(\"Mat15642\");",
											"});",
											"",
											"pm.test(\"Verify enrollmentExpirationDate\", function () {",
											"    pm.expect(jsonData.enrollmentExpirationDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify documentNumber\", function () {",
											"    pm.expect(jsonData.documentNumber).is.to.equal(\"124578362\");",
											"});",
											"",
											"pm.test(\"Verify documentExpirationDate\", function () {",
											"    pm.expect(jsonData.documentExpirationDate).is.to.equal(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/doctors/{{IDDoctors}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors",
										"{{IDDoctors}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.7.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/doctors/{{IDDoctors}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors",
										"{{IDDoctors}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.3.8.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var id = postman.getEnvironmentVariable(\"IDDoctors\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"Doctor\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\"+id+\",\\\"FirstName\\\":\\\"Postman2\\\",\\\"LastName\\\":\\\"Automation2\\\",\\\"Enrollment\\\":\\\"Mat15642\\\",\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":\\\"124578362\\\",\\\"DocumentExpirationDate\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDDoctors}}&IdObjectType=57",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDDoctors}}"
										},
										{
											"key": "IdObjectType",
											"value": "57"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "103.4.MedicalService",
					"item": [
						{
							"name": "103.4.0.MedicalService",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDMedicalService1\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"company\": { \"type\": \"string\" },",
											"            \"phone\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"company\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Service Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-services",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-services"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.1.MedicalService",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDMedicalService\",responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"company\": \"Automation Company\",\r\n  \"phone\": \"12345\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-services",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-services"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.2.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalService = postman.getEnvironmentVariable(\"IDMedicalService\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalService\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalService + \",\\\"Company\\\":\\\"Automation Company\\\",\\\"Phone\\\":\\\"12345\\\"}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObject={{IDMedicalService}}&IdObjectType=58",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalService}}"
										},
										{
											"key": "IdObjectType",
											"value": "58"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.3.MedicalService",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"company\": { \"type\": \"string\" },",
											"        \"phone\": { \"type\": \"string\" },",
											"    },",
											"    \"required\": [\"id\", \"company\"],",
											"    \"additionalProperties\": false",
											"",
											"};",
											"",
											"",
											"pm.test('Medical History Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify company\", function () {",
											"    pm.expect(jsonData.company).is.to.equal(\"Automation Company\");",
											"});",
											"",
											"pm.test(\"Verify phone\", function () {",
											"    pm.expect(jsonData.phone).is.to.equal(\"12345\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-services/{{IDMedicalService}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-services",
										"{{IDMedicalService}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.4.MedicalService",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{IDMedicalService}},\r\n  \"company\": \"Automation Company 3\",\r\n  \"phone\": \"123456\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-services",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-services"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.5.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalService = postman.getEnvironmentVariable(\"IDMedicalService\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalService\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalService + \",\\\"Company\\\":\\\"Automation Company 3\\\",\\\"Phone\\\":\\\"123456\\\"}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObject={{IDMedicalService}}&IdObjectType=58",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalService}}"
										},
										{
											"key": "IdObjectType",
											"value": "58"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.6.MedicalService",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"company\": { \"type\": \"string\" },",
											"        \"phone\": { \"type\": \"string\" },",
											"    },",
											"    \"required\": [\"id\", \"company\"],",
											"    \"additionalProperties\": false",
											"",
											"};",
											"",
											"",
											"pm.test('Medical History Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify company\", function () {",
											"    pm.expect(jsonData.company).is.to.equal(\"Automation Company 3\");",
											"});",
											"",
											"pm.test(\"Verify phone\", function () {",
											"    pm.expect(jsonData.phone).is.to.equal(\"123456\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-services/{{IDMedicalService}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-services",
										"{{IDMedicalService}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.7.MedicalService",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-services/{{IDMedicalService}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-services",
										"{{IDMedicalService}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.4.8.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalService = postman.getEnvironmentVariable(\"IDMedicalService\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalService\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalService + \",\\\"Company\\\":\\\"Automation Company 3\\\",\\\"Phone\\\":\\\"123456\\\"}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalService}}&IdObjectType=58",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalService}}"
										},
										{
											"key": "IdObjectType",
											"value": "58"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "103.5.MedicalControlType",
					"item": [
						{
							"name": "103.5.1.MedicalControlType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-control-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-control-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "103.6.MedicalControlActions",
					"item": [
						{
							"name": "103.6.1.MedicalControlActions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"createAbsence\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/actions",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.6.2.MedicalControlActionsTypeControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"createAbsence\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/control-types/{{IDControlType}}/actions",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"control-types",
										"{{IDControlType}}",
										"actions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "103.7.Vaccine",
					"item": [
						{
							"name": "103.7.1.Vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDVaccine\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDVaccine1\", jsonData[1].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"vaccines"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "103.8.Pathology",
					"item": [
						{
							"name": "103.8.1.Pathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDPathology\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDPathology1\", jsonData[1].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData[0].id).is.to.equal(10016);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData[0].description).is.to.equal(\"Asfixia del nacimiento - P21 - Afecciones originadas en el periodo neonatal\");",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData[2].id).is.to.equal(10053);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData[2].description).is.to.equal(\"Convulsiones del recién nacido - P90 - Afecciones originadas en el periodo neonatal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies?pathologyFilter=neonatal",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies"
									],
									"query": [
										{
											"key": "pathologyFilter",
											"value": "neonatal"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "103.8.2.Pathology-Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.8.3.Pathology-Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData[0].id).is.to.equal(10053);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData[0].description).is.to.equal(\"Convulsiones del recién nacido - P90 - Afecciones originadas en el periodo neonatal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies?pathologyFilter=P90",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies"
									],
									"query": [
										{
											"key": "pathologyFilter",
											"value": "P90"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "103.8.4.Pathology-Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies?pathologyFilter=-%20Enfermedades%20Infecciosas",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies"
									],
									"query": [
										{
											"key": "pathologyFilter",
											"value": "-%20Enfermedades%20Infecciosas"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "103.8.5.PathologybyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData.id).is.to.equal(10986);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData.description).is.to.equal(\"Artritis juvenil en enfermedades clasificadas en otra parte - M09 - Enfermedades del sistema osteomuscular\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies/10986",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies",
										"10986"
									]
								}
							},
							"response": []
						},
						{
							"name": "103.8.6.PathologybyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData.id).is.to.equal(10016);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData.description).is.to.equal(\"Asfixia del nacimiento - P21 - Afecciones originadas en el periodo neonatal\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies/{{IDPathology}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies",
										"{{IDPathology}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "104.MedicalControl",
			"item": [
				{
					"name": "104.1.DatosAuxiliares",
					"item": [
						{
							"name": "104.1.1.PhysicalPerson",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDPhysicalPerson\",responseBody);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"Santiago\",\r\n    \"secondName\": \"\",\r\n    \"lastName\": \"Tario\",\r\n    \"secondLastName\": \"\",\r\n    \"dateOfBirth\": \"1971-02-23T00:00:00\",\r\n    \"gender\": 1,\r\n    \"maritalStatus\": {\r\n        \"id\": 12\r\n    },\r\n    \"idNationality\": 1,\r\n    \"idCountryOfBirth\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/physical-persons",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"physical-persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.2.Employee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idPerson\": {{IDPhysicalPerson}},\r\n    \"fileNumber\": \"{{IDPhysicalPerson}}\",\r\n    \"active\": true,\r\n    \"startDate\": \"2020-04-22T00:00:00.0000\",\r\n    \"endDate\": \"2020-04-22T00:00:00.0000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/employees",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.3.Phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDPhase\",responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var fecha = new Date();\r",
											"fecha.setUTCDate(fecha.getDate()+1);\r",
											"fecha.setUTCMonth(fecha.getMonth()+1);\r",
											"fecha.setUTCFullYear(fecha.getFullYear());\r",
											"\r",
											"var nuevafecha = fecha.toISOString();\r",
											"\r",
											"pm.environment.set(\"fechaBaja\", nuevafecha);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"value": "{{Tenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"active\": true,\r\n    \"holiday\": false,\r\n    \"salary\": false,\r\n    \"compensation\": false,\r\n    \"recognizedPhase\": false,\r\n    \"real\": false,\r\n    \"startDate\": \"2020-01-27T00:00:00.0000\",\r\n    \"endDate\": null,\r\n    \"idCause\": null,\r\n    \"idEmployee\": \"{{IDPhysicalPerson}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/phases",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"phases"
									]
								},
								"description": "Crea una fase"
							},
							"response": []
						},
						{
							"name": "104.1.4.Vaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDVaccine\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDVaccine1\", jsonData[1].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.5.Pathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDPathology\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDPathology1\", jsonData[1].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData[0].id).is.to.equal(10016);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData[0].description).is.to.equal(\"Asfixia del nacimiento - P21 - Afecciones originadas en el periodo neonatal\");",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData[2].id).is.to.equal(10053);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData[2].description).is.to.equal(\"Convulsiones del recién nacido - P90 - Afecciones originadas en el periodo neonatal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies?pathologyFilter=neonatal",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies"
									],
									"query": [
										{
											"key": "pathologyFilter",
											"value": "neonatal"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.6.BloodType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Blood Types Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDBloodType\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDBloodType2\", jsonData[1].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/blood-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"blood-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.7.BloodPressure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Blood Pressure Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDBloodPressure\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDBloodPressure2\", jsonData[1].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/blood-pressures",
									"host": [
										"{{URI}}"
									],
									"path": [
										"blood-pressures"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.8.AbsencesType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDAbsencesType\", jsonData.id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"name\": { \"type\": \"string\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"system\": { \"type\": \"boolean\" },",
											"            \"active\": { \"type\": \"boolean\" },",
											"            \"eventsMaxNumber\": { \"type\": [\"number\", \"null\"] },",
											"            \"monthlyQuota\": { \"type\": [\"number\", \"null\"] },",
											"            \"annualQuota\": { \"type\": [\"number\", \"null\"] },",
											"            \"reviewStatus\": { \"type\": [\"object\", \"null\"] },",
											"            \"occupationalHealth\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"name\", \"description\", \"system\", \"active\", \"eventsMaxNumber\", \"monthlyQuota\", \"annualQuota\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Absence Type Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences-type/8",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences-type",
										"8"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.9.Absences-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Body contain text OrganizationModelNotFound\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OrganizationModelNotFound\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idAbsenceType\": {{IDAbsencesType}},\r\n    \"idCertificate\": null,\r\n    \"idPathology\": 2,\r\n    \"description\": \"Temporary Absence\",\r\n    \"partial\": false,\r\n    \"numberOfHours\": null,\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"dateFrom\": \"2021-3-22T00:00:00.000Z\",\r\n    \"dateTo\": \"2021-3-22T00:00:00.000Z\",\r\n    \"idCountry\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.10.OrganizationModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"postman.setEnvironmentVariable(\"IDOrganizationModel\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"name": "Content-Type",
										"type": "text",
										"value": "{{Autenticacion}}",
										"disabled": true
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"description\": \"Temporary Model para Health\",\r\n  \"defaultValue\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/organization-models",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-models"
									]
								},
								"description": "Crea un nuevo modelo organizacional para asociarlo al empleado recién creado"
							},
							"response": []
						},
						{
							"name": "104.1.11.Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"\tpm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"RelationshipType must be valid and have a body\", function () {",
											"\tpm.response.to.be.ok;",
											"\tpm.response.to.be.withBody; // body tiene que exitir",
											"\tpm.response.to.be.json; // además que sea un JSON válido",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDCompany\",jsonData[0].id);",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"idStructureCompany\": { \"type\": \"number\" },",
											"\t\t\t\"idTercero\": { \"type\": \"number\" },",
											"\t\t\t\"idCountry\": { \"type\": \"number\" },",
											"\t\t\t\"activity\": { \"type\": [\"string\",  \"null\"] },",
											"\t\t\t\"abbreviated\": {\"type\": [\"string\",  \"null\"]  },",
											"\t\t\t\"webSite\": {\"type\": [\"string\",  \"null\"] },",
											"\t\t\t\"activityStartDate\": { \"type\": [\"string\",  \"null\"] },",
											"\t\t\t\"openingHours\": {\"type\": [\"string\",  \"null\"]  },",
											"\t\t\t\"idEmployerType\": { \"type\": \"number\" },",
											"\t\t\t\"idLegalRepresentative\": { \"type\": [\"number\",  \"null\"]  },",
											"\t\t\t\"branches\": { \"type\": \"array\" },",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" },",
											"\t\t\t\"idStructureType\": { \"type\": \"number\" },",
											"\t\t\t\"externalCode\": {\"type\": [\"string\",  \"null\"]  },",
											"\t\t\t\"active\": { \"type\": \"boolean\" },",
											"\t\t\t\"structureType\": { \"type\": [\"number\", \"null\"] }",
											"\t\t},",
											"\t\t\"required\": [\"idStructureCompany\", \"idTercero\", \"idCountry\", \"activity\", \"abbreviated\", \"webSite\", \"activityStartDate\", \"openingHours\", \"idEmployerType\", \"branches\", \"idLegalRepresentative\", \"id\", \"description\", \"idStructureType\", \"externalCode\", \"active\", \"structureType\"],",
											"\t\t\"additionalProperties\": false",
											"\t}",
											"};",
											"",
											"pm.test('Company Structure Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Organization}}/structures/10/Structures",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"structures",
										"10",
										"Structures"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.12.SituacionDeRevista",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var i=0;",
											"",
											"do",
											"{",
											"   postman.setEnvironmentVariable(\"IDSituacionRevista\",jsonData[i].id);",
											"   i++",
											"}",
											"while  (jsonData[i-1].description !='ACTIVO')",
											"",
											"var schema = {",
											"    \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\"description\": { \"type\": \"string\" },",
											"\t\t\"idStructureType\": { \"type\": \"number\" },",
											"\t\t\"externalCode\": { \"type\": [\"string\", \"null\"] },",
											"\t\t\"active\": { \"type\": \"boolean\" },",
											"\t\t\"structureType\": { \"type\": [\"number\", \"null\"] },",
											"    },",
											"    \"required\": [ \"id\", \"description\", \"idStructureType\", \"externalCode\", \"active\", \"structureType\"],",
											"    \"additionalProperties\": false",
											"    }",
											"};",
											"pm.test('Category Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Organization}}/structures/30/Structures",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"structures",
										"30",
										"Structures"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.13.OrganizationModelStructureType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idOrganizationModel\": {{IDOrganizationModel}},\r\n  \"modelStructures\": [\r\n    {\r\n      \"idTypeStructure\": 10,\r\n      \"orderTypeStructure\": 1,\r\n      \"required\": true,\r\n      \"defaultStructure\": {{IDCompany}}\r\n    },\r\n      {\r\n      \"idTypeStructure\": 30,\r\n      \"orderTypeStructure\": 3,\r\n      \"required\": true,\r\n      \"defaultStructure\": {{IDSituacionRevista}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/organization-model-structure-types",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-model-structure-types"
									]
								},
								"description": "Le asocia atributos al modelo recién creado"
							},
							"response": []
						},
						{
							"name": "104.1.14.EmployeeOrganizationModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idOrganizationModel\": {{IDOrganizationModel}},\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"startDate\": \"2010-04-22T00:00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/employee-organization-models",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"employee-organization-models"
									]
								},
								"description": "Le asocia el modelo 1 al empleado"
							},
							"response": []
						},
						{
							"name": "104.1.15.Absences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDAbsence\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idAbsenceType\": {{IDAbsencesType}},\r\n    \"idCertificate\": null,\r\n    \"idPathology\": 2,\r\n    \"description\": \"Temporary Absence\",\r\n    \"partial\": false,\r\n    \"numberOfHours\": null,\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"dateFrom\": \"2021-3-22T00:00:00.000Z\",\r\n    \"dateTo\": \"2021-3-22T00:00:00.000Z\",\r\n    \"idCountry\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.16.MedicalControlType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-control-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-control-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.1.17.MedicalControlActionsTypeControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDAction\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"createAbsence\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/control-types/{{IDControlType}}/actions",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"control-types",
										"{{IDControlType}}",
										"actions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "104.2.EmployeeMedicalHistory",
					"item": [
						{
							"name": "104.2.1.EmployeeMedicalHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDMedicalHistory\",responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"idPerson\": {{IDPhysicalPerson}},\r\n  \"idBloodType\": {{IDBloodType}},\r\n  \"idBloodPressure\": {{IDBloodPressure}},\r\n  \"isRiskGroup\": true\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/medical-history",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"medical-history"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.2.2.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalHistory = postman.getEnvironmentVariable(\"IDMedicalHistory\");",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idBloodType = postman.getEnvironmentVariable(\"IDBloodType\");",
											"var idBloodPressure = postman.getEnvironmentVariable(\"IDBloodPressure\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeMedicalHistory\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalHistory + \",\\\"IdPerson\\\":\" + idPerson + \",\\\"IdBloodType\\\":\" + idBloodType + \",\\\"IdBloodPressure\\\":\" + idBloodPressure + \",\\\"IsRiskGroup\\\":\" + true + \"}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=65&IdObject={{IDMedicalHistory}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "65"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalHistory}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.2.3.EmployeeMedicalHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idBloodType = postman.getEnvironmentVariable(\"IDBloodType\");",
											"var idBloodPressure = postman.getEnvironmentVariable(\"IDBloodPressure\");",
											"",
											"var schema = {",
											"",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"idPerson\": { \"type\": \"number\" },",
											"        \"idBloodType\": { \"type\": \"number\" },",
											"        \"idBloodPressure\": { \"type\": \"number\" },",
											"        \"isRiskGroup\": { \"type\": \"boolean\" }",
											"    },",
											"    \"required\": [\"id\", \"idPerson\"],",
											"    \"additionalProperties\": false",
											"",
											"};",
											"",
											"",
											"pm.test('Medical History Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idPerson\", function () {",
											"    pm.expect(Number(jsonData.idPerson)).is.to.equal(Number(idPhysicalPerson));",
											"});",
											"",
											"pm.test(\"Verify idBloodType\", function () {",
											"    pm.expect(Number(jsonData.idBloodType)).is.to.equal(Number(idBloodType));",
											"});",
											"",
											"pm.test(\"Verify idBloodPressure\", function () {",
											"    pm.expect(Number(jsonData.idBloodPressure)).is.to.equal(Number(idBloodPressure));",
											"});",
											"",
											"pm.test(\"Verify isRiskGroup\", function () {",
											"    pm.expect(jsonData.isRiskGroup).is.to.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/medical-history",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"medical-history"
									],
									"query": [
										{
											"key": "idPerson",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.2.4.EmployeeMedicalHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{IDMedicalHistory}},\r\n    \"idPerson\": {{IDPhysicalPerson}},\r\n    \"idBloodType\": {{IDBloodType2}},\r\n    \"idBloodPressure\": {{IDBloodPressure2}},\r\n    \"isRiskGroup\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/medical-history",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"medical-history"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.2.5.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalHistory = postman.getEnvironmentVariable(\"IDMedicalHistory\");",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idBloodType2 = postman.getEnvironmentVariable(\"IDBloodType2\");",
											"var idBloodPressure2 = postman.getEnvironmentVariable(\"IDBloodPressure2\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeMedicalHistory\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalHistory + \",\\\"IdPerson\\\":\" + idPerson + \",\\\"IdBloodType\\\":\" + idBloodType2 + \",\\\"IdBloodPressure\\\":\" + idBloodPressure2 + \",\\\"IsRiskGroup\\\":\" + false + \"}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObject={{IDMedicalHistory}}&IdObjectType=65",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalHistory}}"
										},
										{
											"key": "IdObjectType",
											"value": "65"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.2.6.EmployeeMedicalHistory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idBloodType = postman.getEnvironmentVariable(\"IDBloodType2\");",
											"var idBloodPressure = postman.getEnvironmentVariable(\"IDBloodPressure2\");",
											"",
											"var schema = {",
											"",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"idPerson\": { \"type\": \"number\" },",
											"        \"idBloodType\": { \"type\": \"number\" },",
											"        \"idBloodPressure\": { \"type\": \"number\" },",
											"        \"isRiskGroup\": { \"type\": \"boolean\" }",
											"    },",
											"    \"required\": [\"id\", \"idPerson\"],",
											"    \"additionalProperties\": false",
											"",
											"};",
											"",
											"pm.test('Medical History Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idPerson\", function () {",
											"    pm.expect(Number(jsonData.idPerson)).is.to.equal(Number(idPhysicalPerson));",
											"});",
											"",
											"pm.test(\"Verify idBloodType\", function () {",
											"    pm.expect(Number(jsonData.idBloodType)).is.to.equal(Number(idBloodType));",
											"});",
											"",
											"pm.test(\"Verify idBloodPressure\", function () {",
											"    pm.expect(Number(jsonData.idBloodPressure)).is.to.equal(Number(idBloodPressure));",
											"});",
											"pm.test(\"Verify isRiskGroup\", function () {",
											"    pm.expect(jsonData.isRiskGroup).is.to.equal(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/medical-history",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"medical-history"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "104.3.EmployeeVaccine",
					"item": [
						{
							"name": "104.3.0.EmployeeVaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"vaccines\": [\r\n        {\r\n            \"idVaccine\": {{IDVaccine}},\r\n            \"applicationDate\": \"2021-07-07T00:00:00.000Z\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.1.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idVaccine = postman.getEnvironmentVariable(\"IDVaccine\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeVaccines\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"IdEmployee\\\":\"+ idPerson +\",\\\"Vaccines\\\":[{\\\"IdVaccine\\\":\"+ idVaccine +\",\\\"ApplicationDate\\\":\\\"2021-07-07T00:00:00Z\\\"}]}\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObjectType=60&IdEntityParent={{IDPhysicalPerson}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "60"
										},
										{
											"key": "IdEntityParent",
											"value": "{{IDPhysicalPerson}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.2.EmployeeVaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var idVaccine = postman.getEnvironmentVariable(\"IDVaccine\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"idVaccine\": { \"type\": \"number\" },",
											"            \"applicationDate\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"idVaccine\", \"applicationDate\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idVaccine\", function () {",
											"    pm.expect(jsonData[0].idVaccine).is.to.equal(Number(idVaccine));",
											"});",
											"",
											"pm.test(\"Verify applicationDate\", function () {",
											"    pm.expect(jsonData[0].applicationDate).is.to.equal(\"2021-07-07T00:00:00\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.3.EmployeeVaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"vaccines\": [\r\n        {\r\n            \"idVaccine\": {{IDVaccine}},\r\n            \"applicationDate\": \"2021-07-07T00:00:00.000Z\"\r\n        },\r\n        {\r\n            \"idVaccine\": {{IDVaccine1}},\r\n            \"applicationDate\": \"2021-07-08T00:00:00.000Z\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.4.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idVaccine = postman.getEnvironmentVariable(\"IDVaccine\");",
											"var idVaccine1 = postman.getEnvironmentVariable(\"IDVaccine1\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeVaccines\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"IdEmployee\\\":\"+ idPerson +\",\\\"Vaccines\\\":[{\\\"IdVaccine\\\":\"+ idVaccine +\",\\\"ApplicationDate\\\":\\\"2021-07-07T00:00:00Z\\\"},{\\\"IdVaccine\\\":\"+ idVaccine1 +\",\\\"ApplicationDate\\\":\\\"2021-07-08T00:00:00Z\\\"}]}\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObjectType=60&IdEntityParent={{IDPhysicalPerson}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "60"
										},
										{
											"key": "IdEntityParent",
											"value": "{{IDPhysicalPerson}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.5.EmployeeVaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idVaccine = postman.getEnvironmentVariable(\"IDVaccine\");",
											"var idVaccine1 = postman.getEnvironmentVariable(\"IDVaccine1\");",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"idVaccine\": { \"type\": \"number\" },",
											"\t\t\t\"applicationDate\": { \"type\": \"string\" }",
											"\t\t\t},",
											"\t\t\"required\": [\"idVaccine\", \"applicationDate\"],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idVaccine 1\", function () {",
											"    pm.expect(jsonData[0].idVaccine).is.to.equal(Number(idVaccine));",
											"});",
											"",
											"pm.test(\"Verify applicationDate 1\", function () {",
											"    pm.expect(jsonData[0].applicationDate).is.to.equal(\"2021-07-07T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify idVaccine 2\", function () {",
											"    pm.expect(jsonData[1].idVaccine).is.to.equal(Number(idVaccine1));",
											"});",
											"",
											"pm.test(\"Verify applicationDate 2\", function () {",
											"    pm.expect(jsonData[1].applicationDate).is.to.equal(\"2021-07-08T00:00:00\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.6.EmployeeVaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"vaccines\": [\r\n        {\r\n            \"idVaccine\": {{IDVaccine1}},\r\n            \"applicationDate\": \"2021-07-09T00:00:00.000Z\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.7.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idVaccine1 = postman.getEnvironmentVariable(\"IDVaccine1\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeVaccines\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"IdEmployee\\\":\"+ idPerson +\",\\\"Vaccines\\\":[{\\\"IdVaccine\\\":\"+ idVaccine1 +\",\\\"ApplicationDate\\\":\\\"2021-07-09T00:00:00Z\\\"}]}\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObjectType=60&IdEntityParent={{IDPhysicalPerson}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "60"
										},
										{
											"key": "IdEntityParent",
											"value": "{{IDPhysicalPerson}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.8.EmployeeVaccine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idVaccine1 = postman.getEnvironmentVariable(\"IDVaccine1\");",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"idVaccine\": { \"type\": \"number\" },",
											"            \"applicationDate\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"idVaccine\", \"applicationDate\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idVaccine 1\", function () {",
											"    pm.expect(jsonData[0].idVaccine).is.to.equal(Number(idVaccine1));",
											"});",
											"",
											"pm.test(\"Verify applicationDate 1\", function () {",
											"    pm.expect(jsonData[0].applicationDate).is.to.equal(\"2021-07-09T00:00:00\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"vaccines"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.3.9.EmployeeVaccine-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"vaccines\": [\r\n        {\r\n            \"idVaccine\": {{IDVaccine}},\r\n            \"applicationDate\": \"2021-07-07T00:00:00.000Z\"\r\n        },\r\n        {\r\n            \"idVaccine\": {{IDVaccine}},\r\n            \"applicationDate\": \"2021-07-07T00:00:00.000Z\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/vaccines",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"vaccines"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "104.4.EmployeePathology",
					"item": [
						{
							"name": "104.4.1.EmployeePathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"pathologies\": [\r\n        {\r\n            \"id\": {{IDPathology}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"pathologies"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.2.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idPathologies = postman.getEnvironmentVariable(\"IDPathology\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeePathologies\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"IdEmployee\\\":\"+ idPerson +\",\\\"Pathologies\\\":[{\\\"Id\\\":\"+ idPathologies +\",\\\"Description\\\":null}]}\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdEntityParent={{IDPhysicalPerson}}&IdObjectType=61",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdEntityParent",
											"value": "{{IDPhysicalPerson}}"
										},
										{
											"key": "IdObjectType",
											"value": "61"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.3.EmployeePathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var idPathology = postman.getEnvironmentVariable(\"IDPathology\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id Pathology\", function () {",
											"    pm.expect(jsonData[0].id).is.to.equal(Number(idPathology));",
											"});",
											"",
											"pm.test(\"Verify description Pathology\", function () {",
											"    pm.expect(jsonData[0].description).is.to.equal(\"Asfixia del nacimiento - P21 - Afecciones originadas en el periodo neonatal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"pathologies"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.4.EmployeePathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"pathologies\": [\r\n        {\r\n            \"id\": {{IDPathology}}\r\n        },\r\n        {\r\n            \"id\": {{IDPathology1}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"pathologies"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.5.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idPathologies = postman.getEnvironmentVariable(\"IDPathology\");",
											"var idPathologies1 = postman.getEnvironmentVariable(\"IDPathology1\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeePathologies\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"IdEmployee\\\":\"+ idPerson +\",\\\"Pathologies\\\":[{\\\"Id\\\":\"+ idPathologies +\",\\\"Description\\\":null},{\\\"Id\\\":\"+ idPathologies1 +\",\\\"Description\\\":null}]}\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdEntityParent={{IDPhysicalPerson}}&IdObjectType=61",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdEntityParent",
											"value": "{{IDPhysicalPerson}}"
										},
										{
											"key": "IdObjectType",
											"value": "61"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.6.EmployeePathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var idPathology = postman.getEnvironmentVariable(\"IDPathology\");",
											"var idPathology1 = postman.getEnvironmentVariable(\"IDPathology1\");",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idPathology\", function () {",
											"    pm.expect(jsonData[0].id).is.to.equal(Number(idPathology));",
											"});",
											"",
											"pm.test(\"Verify description Pathology\", function () {",
											"    pm.expect(jsonData[0].description).is.to.equal(\"Asfixia del nacimiento - P21 - Afecciones originadas en el periodo neonatal\");",
											"});",
											"",
											"pm.test(\"Verify idPathology2\", function () {",
											"    pm.expect(jsonData[1].id).is.to.equal(Number(idPathology1));",
											"});",
											"",
											"pm.test(\"Verify description Pathology 2\", function () {",
											"    pm.expect(jsonData[1].description).is.to.equal(\"Coagulación intravascular diseminada en el feto y el recién nacido - P60 - Afecciones originadas en el periodo neonatal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"pathologies"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.7.EmployeePathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"pathologies\": [\r\n        {\r\n            \"id\": {{IDPathology1}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"pathologies"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.8.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idPathologies1 = postman.getEnvironmentVariable(\"IDPathology1\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeePathologies\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"IdEmployee\\\":\"+ idPerson +\",\\\"Pathologies\\\":[{\\\"Id\\\":\"+ idPathologies1 +\",\\\"Description\\\":null}]}\");",
											"    ",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idPerson));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdEntityParent={{IDPhysicalPerson}}&IdObjectType=61",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdEntityParent",
											"value": "{{IDPhysicalPerson}}"
										},
										{
											"key": "IdObjectType",
											"value": "61"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.9.EmployeePathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var idPathology1 = postman.getEnvironmentVariable(\"IDPathology1\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Vaccine Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id Pathology\", function () {",
											"    pm.expect(jsonData[0].id).is.to.equal(Number(idPathology1));",
											"});",
											"",
											"pm.test(\"Verify description Pathology\", function () {",
											"    pm.expect(jsonData[0].description).is.to.equal(\"Coagulación intravascular diseminada en el feto y el recién nacido - P60 - Afecciones originadas en el periodo neonatal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/clinical-records/employees/{{IDPhysicalPerson}}/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"{{IDPhysicalPerson}}",
										"pathologies"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.4.10.EmployeePathology-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"pathologies\": [\r\n        {\r\n            \"id\": {{IDPathology}}\r\n        },\r\n        {\r\n            \"id\": {{IDPathology}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/clinical-records/employees/pathologies",
									"host": [
										"{{URI}}"
									],
									"path": [
										"clinical-records",
										"employees",
										"pathologies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "104.5.EmployeeMedicalExam",
					"item": [
						{
							"name": "104.5.1.EmployeeMedicalExam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDEmployee\", jsonData[0].idEmployee);",
											"postman.setEnvironmentVariable(\"IDFileType\", jsonData[0].idFileType);",
											"postman.setEnvironmentVariable(\"IDFile\", jsonData[0].idFile);",
											"postman.setEnvironmentVariable(\"IDMedicalExam\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDExpirationDate\", jsonData[0].expirationDate);",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"            \"idEmployee\": { \"type\": \"number\" },",
											"            \"idFileType\": { \"type\": \"number\" },",
											"            \"idFile\": { \"type\": \"number\" },",
											"\t\t\t\"expirationDate\": { \"type\": [\"string\",\"null\"] },",
											"            \"examDate\": { \"type\": [\"string\",\"null\"] }",
											"\t\t\t},",
											"\t\t\"required\": [\"id\", ],",
											"\t\t\"additionalProperties\": false",
											"\t\t}",
											"};",
											"",
											"",
											"pm.test('Medical Exam Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-exams",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.2.EmployeeMedicalExam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-exams/{{IDMedicalExam}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams",
										"{{IDMedicalExam}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.3.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalExam = postman.getEnvironmentVariable(\"IDMedicalExam\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDEmployee\");",
											"var idFileType = postman.getEnvironmentVariable(\"IDFileType\");",
											"var idFile = postman.getEnvironmentVariable(\"IDFile\")",
											"var idExpirationDate = postman.getEnvironmentVariable(\"IDExpirationDate\")",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeMedicalExam\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    if (idExpirationDate != null) {",
											"       pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalExam + \",\\\"IdEmployee\\\":\" + idEmployee + \",\\\"IdFileType\\\":\" + idFileType + \",\\\"IdFile\\\":\" + idFile + \",\\\"ExpirationDate\\\":null,\\\"ExamDate\\\":null}\");",
											"    }",
											"    else {",
											"        pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalExam + \",\\\"IdEmployee\\\":\" + idEmployee + \",\\\"IdFileType\\\":\" + idFileType + \",\\\"IdFile\\\":\" + idFile + \",\\\"ExpirationDate\\\":null,\\\"ExamDate\\\":null}\");",
											"    }",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalExam}}&IdObjectType=66",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalExam}}"
										},
										{
											"key": "IdObjectType",
											"value": "66"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.4.EmployeeMedicalExamNegative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ExpirationDateMustBeGreaterThanExamDate\");",
											"});",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"IdFileTypeNotExists\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDEmployee}},\r\n    \"idFileType\": 9999,\r\n    \"idFile\": {{IDFile}},\r\n    \"expirationDate\": \"2022-02-04T00:00:00Z\",\r\n  \"examDate\": \"2022-02-04T00:00:00Z\"\r\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-exams",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams"
									]
								},
								"description": "Validamos que La fecha de examen y vencimiento no pueden ser iguales"
							},
							"response": []
						},
						{
							"name": "104.5.5.EmployeeMedicalExam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDMedicalExam\",responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDEmployee}},\r\n    \"idFileType\": {{IDFileType}},\r\n    \"idFile\": {{IDFile}},\r\n    \"expirationDate\": \"2022-12-12T00:00:00.00Z\",\r\n   \"examDate\": \"2022-07-12T00:00:00.00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-exams",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.6.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalExam = postman.getEnvironmentVariable(\"IDMedicalExam\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDEmployee\");",
											"var idFileType = postman.getEnvironmentVariable(\"IDFileType\");",
											"var idFile = postman.getEnvironmentVariable(\"IDFile\")",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeMedicalExam\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalExam + \",\\\"IdEmployee\\\":\" + idEmployee + \",\\\"IdFileType\\\":\" + idFileType + \",\\\"IdFile\\\":\" + idFile + \",\\\"ExpirationDate\\\":\\\"2022-12-12T00:00:00Z\\\",\\\"ExamDate\\\":\\\"2022-07-12T00:00:00Z\\\"}\");",
											"});",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idEmployee));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=66&IdObject={{IDMedicalExam}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "66"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalExam}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.7.EmployeeMedicalExamNegative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"EmployeeMedicalExamAlreadyExists\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDEmployee}},\r\n    \"idFileType\": {{IDFileType}},\r\n    \"idFile\": {{IDFile}},\r\n    \"expirationDate\": \"2022-07-12T00:00:00.00Z\",\r\n   \"examDate\": \"2022-07-12T00:00:00.00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-exams",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.8.EmployeeMedicalExam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idEmployee = postman.getEnvironmentVariable(\"IDEmployee\");",
											"var idFileType = postman.getEnvironmentVariable(\"IDFileType\");",
											"var idFile = postman.getEnvironmentVariable(\"IDFile\");",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"idEmployee\": { \"type\": \"number\" },",
											"        \"idFileType\": { \"type\": \"number\" },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"expirationDate\": { \"type\": \"string\" },",
											"        \"examDate\": { \"type\": \"string\" },",
											"    },",
											"    \"required\": [\"id\"],",
											"    \"additionalProperties\": false",
											"    ",
											"};",
											"",
											"pm.test('Medical Exam Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idEmployee\", function () {",
											"    pm.expect(Number(jsonData.idEmployee)).is.to.equal(Number(idEmployee));",
											"});",
											"",
											"pm.test(\"Verify idFileType\", function () {",
											"    pm.expect(Number(jsonData.idFileType)).is.to.equal(Number(idFileType));",
											"});",
											"",
											"pm.test(\"Verify idFile\", function () {",
											"    pm.expect(Number(jsonData.idFile)).is.to.equal(Number(idFile));",
											"});",
											"",
											"pm.test(\"Verify expirationDate\", function () {",
											"    pm.expect(jsonData.expirationDate).is.to.equal(\"2022-12-12T00:00:00\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-exams/{{IDMedicalExam}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams",
										"{{IDMedicalExam}}"
									],
									"query": [
										{
											"key": "idPerson",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.9.EmployeeMedicalExamNegative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ExpirationDateMustBeGreaterThanExamDate\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{IDMedicalExam}},\r\n    \"idEmployee\": {{IDEmployee}},\r\n    \"idFileType\": {{IDFileType}},\r\n    \"idFile\": {{IDFile}},\r\n    \"expirationDate\": \"2022-08-20T00:00:00.00Z\",\r\n   \"examDate\": \"2022-08-20T00:00:00.00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-exams",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.10.EmployeeMedicalExam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{IDMedicalExam}},\r\n    \"idEmployee\": {{IDEmployee}},\r\n    \"idFileType\": {{IDFileType}},\r\n    \"idFile\": {{IDFile}},\r\n    \"expirationDate\": \"2022-08-22T00:00:00.00Z\",\r\n   \"examDate\": \"2022-08-20T00:00:00.00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-exams",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams"
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.11.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalExam = postman.getEnvironmentVariable(\"IDMedicalExam\");",
											"var idPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDEmployee\");",
											"var idFileType = postman.getEnvironmentVariable(\"IDFileType\");",
											"var idFile = postman.getEnvironmentVariable(\"IDFile\")",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"EmployeeMedicalExam\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalExam + \",\\\"IdEmployee\\\":\" + idEmployee + \",\\\"IdFileType\\\":\" + idFileType + \",\\\"IdFile\\\":\" + idFile + \",\\\"ExpirationDate\\\":\\\"2022-08-22T00:00:00Z\\\",\\\"ExamDate\\\":\\\"2022-08-20T00:00:00Z\\\"}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(Number(idEmployee));",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObject={{IDMedicalExam}}&IdObjectType=66",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalExam}}"
										},
										{
											"key": "IdObjectType",
											"value": "66"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "104.5.12.EmployeeMedicalExamByID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"number\" },",
											"        \"idEmployee\": { \"type\": \"number\" },",
											"        \"idFileType\": { \"type\": \"number\" },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"expirationDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"examDate\": { \"type\": [\"string\", \"null\"] }",
											"    },",
											"    \"required\": [\"id\"],",
											"    \"additionalProperties\": false",
											"",
											"};",
											"",
											"pm.test('Medical Exam Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify expirationDate\", function () {",
											"    pm.expect(jsonData.expirationDate).is.to.equal(\"2022-08-22T00:00:00\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-exams/{{IDMedicalExam}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-exams",
										"{{IDMedicalExam}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "104.6.EmployeeMedicalControl",
					"item": [
						{
							"name": "104.6.1.Caso General",
							"item": [
								{
									"name": "104.6.1.0.Doctors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
													"var schema = {",
													"\t\"items\":{",
													"\t\t\"type\": \"object\",",
													"\t\t\"properties\": {",
													"\t\t\t\"id\": { \"type\": \"number\" },",
													"            \"firstName\": { \"type\": \"string\" },",
													"            \"lastName\": { \"type\": \"string\" },",
													"            \"enrollment\": { \"type\": \"string\" },",
													"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
													"            \"documentNumber\": { \"type\": \"string\" },",
													"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
													"\t\t\t},",
													"\t\t\"required\": [\"id\", \"firstName\"],",
													"\t\t\"additionalProperties\": false",
													"}",
													"};",
													"",
													"",
													"pm.test('Doctor Schema is valid', function () {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"url": {
											"raw": "{{URI}}/doctors",
											"host": [
												"{{URI}}"
											],
											"path": [
												"doctors"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.1.MedicalControl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": {{IDControlType}},\r\n  \"idAction\": {{IDAction}},\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\":  {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URI}}/medical-controls",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-controls"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.1.MedicalControl-Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"AbsenceAlreadyRelated\");",
													"    pm.expect(pm.response.text()).to.include(\"CannotDefinePrivateDoctorNameAndOccupationalDoctor\");",
													"    pm.expect(pm.response.text()).to.include(\"CannotDefinePrivateDoctorEnrollmentAndOccupationalDoctor\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": {{IDControlType}},\r\n  \"idAction\": {{IDAction}},\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\":  {{IDDoctors1}},\r\n  \"privateDoctorName\": \"Automation\",\r\n  \"privateDoctorEnrollment\": \"Medico Externo\",\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URI}}/medical-controls",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-controls"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.2.AuditSearchObjectTypePOST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
													"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
													"var idControlType = postman.getEnvironmentVariable(\"IDControlType\");",
													"var idAction = postman.getEnvironmentVariable(\"IDAction\")",
													"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
													"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
													"",
													"var schema = {",
													"    \"items\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"number\" },",
													"            \"origin\": { \"type\": \"string\" },",
													"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
													"            \"json\": { \"type\": \"string\" },",
													"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
													"            \"userName\": { \"type\": \"string\" },",
													"            \"creation\": { \"type\": \"string\" },",
													"            \"verb\": { \"type\": \"string\" },",
													"            \"idObject\": { \"type\": \"number\" },",
													"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
													"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
													"        },",
													"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
													"        \"additionalProperties\": false",
													"    }",
													"};",
													"",
													"pm.test('Audit Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Verify objectType\", function () {",
													"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
													"});",
													"",
													"pm.test(\"Verify previousJson\", function () {",
													"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
													"});",
													"",
													"pm.test(\"Verify data\", function () {",
													"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":\" + idControlType + \",\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
													"});",
													"",
													"pm.test(\"Verify verb\", function () {",
													"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
													"});",
													"",
													"pm.test(\"Verify idEntityParent\", function () {",
													"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
													"});",
													"",
													"pm.test(\"Verify idEntityTypeParent\", function () {",
													"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 5000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"url": {
											"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
											"host": [
												"{{URI_Audit}}"
											],
											"path": [
												"Audit",
												"Search"
											],
											"query": [
												{
													"key": "Verb",
													"value": "POST"
												},
												{
													"key": "UserName",
													"value": "webapi"
												},
												{
													"key": "DateRange.From",
													"value": "{{fechaActual}}",
													"disabled": true
												},
												{
													"key": "IdObjectType",
													"value": "67"
												},
												{
													"key": "IdObject",
													"value": "{{IDMedicalControl}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.3.MedicalControl-Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"AbsenceAlreadyRelated\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 3,\r\n  \"idAction\": 4,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URI}}/medical-controls",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-controls"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.4.MedicalControl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"postman.setEnvironmentVariable(\"IDControlType\",jsonData.idControlType);",
													"",
													"var schema = {",
													"\t\t\"type\": \"object\",",
													"\t\t\"properties\": {",
													"            \"tracking\": { \"type\": \"array\" },",
													"\t\t\t\"id\": { \"type\": \"number\" },",
													"\t\t\t\"idEmployee\": { \"type\": \"number\" },",
													"\t\t\t\"date\": { \"type\": \"string\" },",
													"\t\t\t\"idControlType\": { \"type\": \"number\" },",
													"\t\t\t\"idAction\": { \"type\": \"number\" },",
													"\t\t\t\"idMedicalService\": { \"type\": \"number\" },",
													"\t\t\t\"idOccupationalDoctor\": { \"type\": [\"number\",\"null\"] },",
													"\t\t\t\"privateDoctorName\": { \"type\": [\"string\",\"null\"] },",
													"\t\t\t\"privateDoctorEnrollment\": { \"type\": [\"string\",\"null\"] },",
													"\t\t\t\"diagnosis\": { \"type\": \"string\" },",
													"\t\t\t\"idAbsence\": { \"type\": \"number\" },",
													"\t\t\t\"idFile\": { \"type\": \"number\" },",
													"\t\t\t\"breakTime\": { \"type\": \"number\" },",
													"\t\t\t\"testDate\": { \"type\": [\"string\",\"null\"] },",
													"\t\t\t\"testResult\": { \"type\": [\"boolean\",\"null\"]} ,",
													"            \"idParent\": { \"type\": [\"number\",\"null\"]},",
													"            \"idTrackingType\":  { \"type\": [\"number\",\"null\"]},",
													"            \"pathologies\": { \"type\": \"array\" },",
													"            \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},\t",
													"\t\t\t},",
													"\t\t\"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
													"\t\t\"additionalProperties\": false",
													"    ",
													"};",
													"",
													"pm.test('Medical Control Schema is valid', function () {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"url": {
											"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-controls",
												"{{IDMedicalControl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.5.MedicalService",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"var jsonData = pm.response.json();",
													"postman.setEnvironmentVariable(\"IDMedicalService1\", jsonData[0].id);",
													"var schema = {",
													"    \"items\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"number\" },",
													"            \"company\": { \"type\": \"string\" },",
													"            \"phone\": { \"type\": \"string\" },",
													"        },",
													"        \"required\": [\"id\", \"company\"],",
													"        \"additionalProperties\": false",
													"    }",
													"};",
													"",
													"",
													"pm.test('Medical Service Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URI}}/medical-services",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-services"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.6.MedicalControl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"tracking\": [],\r\n  \"id\": {{IDMedicalControl}},\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-08-30T19:30:00.000Z\",\r\n  \"idControlType\": {{IDControlType}},\r\n  \"idAction\": {{IDAction}},\r\n  \"idMedicalService\": {{IDMedicalService1}},\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Varicelas\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URI}}/medical-controls",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-controls"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.7.AuditSearchObjectTypePUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
													"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
													"var idControlType = postman.getEnvironmentVariable(\"IDControlType\");",
													"var idAction = postman.getEnvironmentVariable(\"IDAction\")",
													"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
													"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
													"",
													"var schema = {",
													"    \"items\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"number\" },",
													"            \"origin\": { \"type\": \"string\" },",
													"            \"objectType\": { \"type\": \"string\" },",
													"            \"json\": { \"type\": \"string\" },",
													"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
													"            \"userName\": { \"type\": \"string\" },",
													"            \"creation\": { \"type\": \"string\" },",
													"            \"verb\": { \"type\": \"string\" },",
													"            \"idObject\": { \"type\": \"number\" },",
													"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
													"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
													"        },",
													"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
													"        \"additionalProperties\": false",
													"    }",
													"};",
													"",
													"pm.test('Audit Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Verify objectType\", function () {",
													"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
													"});",
													"",
													"pm.test(\"Verify previousJson\", function () {",
													"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
													"});",
													"",
													"pm.test(\"Verify data\", function () {",
													"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-30T19:30:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":\" + idControlType + \",\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":\" + idAction + \",\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Varicelas\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
													"});",
													"",
													"pm.test(\"Verify verb\", function () {",
													"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
													"});",
													"",
													"pm.test(\"Verify idEntityParent\", function () {",
													"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
													"});",
													"",
													"pm.test(\"Verify idEntityTypeParent\", function () {",
													"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"url": {
											"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObject={{IDMedicalControl}}&IdObjectType=67",
											"host": [
												"{{URI_Audit}}"
											],
											"path": [
												"Audit",
												"Search"
											],
											"query": [
												{
													"key": "UserName",
													"value": "webapi"
												},
												{
													"key": "Verb",
													"value": "PUT"
												},
												{
													"key": "DateRange.From",
													"value": "{{fechaActual}}",
													"disabled": true
												},
												{
													"key": "IdObject",
													"value": "{{IDMedicalControl}}"
												},
												{
													"key": "IdObjectType",
													"value": "67"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.8.MedicalControl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"",
													"",
													"var schema = {",
													"\t\t\"type\": \"object\",",
													"\t\t\"properties\": {",
													"            \"tracking\": { \"type\": \"array\" },",
													"\t\t\t\"id\": { \"type\": \"number\" },",
													"\t\t\t\"idEmployee\": { \"type\": \"number\" },",
													"\t\t\t\"date\": { \"type\": \"string\" },",
													"\t\t\t\"idControlType\": { \"type\": \"number\" },",
													"\t\t\t\"idAction\": { \"type\": \"number\" },",
													"\t\t\t\"idMedicalService\": { \"type\": \"number\" },",
													"\t\t\t\"idOccupationalDoctor\": { \"type\": [\"number\",\"null\"] },",
													"\t\t\t\"privateDoctorName\": { \"type\":  [\"string\",\"null\"] },",
													"\t\t\t\"privateDoctorEnrollment\": { \"type\":  [\"string\",\"null\"] },",
													"\t\t\t\"diagnosis\": { \"type\": \"string\" },",
													"\t\t\t\"idAbsence\": { \"type\": \"number\" },",
													"\t\t\t\"idFile\": { \"type\": \"number\" },",
													"\t\t\t\"breakTime\": { \"type\": \"number\" },",
													"\t\t\t\"testDate\": { \"type\": [\"string\",\"null\"] },",
													"\t\t\t\"testResult\": { \"type\": [\"boolean\",\"null\"]} ,",
													"            \"idParent\": { \"type\": [\"number\",\"null\"]},",
													"            \"idTrackingType\":  { \"type\": [\"number\",\"null\"]},",
													"            \"pathologies\": { \"type\": \"array\" },",
													"            \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},\t",
													"\t\t\t},",
													"\t\t\"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
													"\t\t\"additionalProperties\": false",
													"};",
													"",
													"pm.test('Medical Control Schema is valid', function () {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"url": {
											"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-controls",
												"{{IDMedicalControl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.9.MedicalControl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"url": {
											"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
											"host": [
												"{{URI}}"
											],
											"path": [
												"medical-controls",
												"{{IDMedicalControl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "104.6.1.10.AuditSearchObjectTypeDELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Status code name has string\", function () {",
													"    pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
													"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
													"var idControlType = postman.getEnvironmentVariable(\"IDControlType\");",
													"var idAction = postman.getEnvironmentVariable(\"IDAction\")",
													"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
													"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
													"",
													"var schema = {",
													"    \"items\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"number\" },",
													"            \"origin\": { \"type\": \"string\" },",
													"            \"objectType\": { \"type\": \"string\" },",
													"            \"json\": { \"type\": \"string\" },",
													"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
													"            \"userName\": { \"type\": \"string\" },",
													"            \"creation\": { \"type\": \"string\" },",
													"            \"verb\": { \"type\": \"string\" },",
													"            \"idObject\": { \"type\": \"number\" },",
													"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
													"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
													"        },",
													"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
													"        \"additionalProperties\": false",
													"    }",
													"};",
													"",
													"pm.test('Audit Schema is valid', function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Verify objectType\", function () {",
													"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
													"});",
													"",
													"pm.test(\"Verify previousJson\", function () {",
													"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
													"});",
													"",
													"pm.test(\"Verify data\", function () {",
													"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-30T19:30:00\\\",\\\"ControlType\\\":{\\\"Id\\\":\" + idControlType + \",\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":\" + idAction + \",\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Varicelas\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
													"});",
													"",
													"pm.test(\"Verify verb\", function () {",
													"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
													"});",
													"",
													"pm.test(\"Verify idEntityParent\", function () {",
													"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
													"});",
													"",
													"pm.test(\"Verify idEntityTypeParent\", function () {",
													"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 5000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Autenticacion}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Tenant-Id",
												"type": "text",
												"value": "{{Tenant}}"
											}
										],
										"url": {
											"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
											"host": [
												"{{URI_Audit}}"
											],
											"path": [
												"Audit",
												"Search"
											],
											"query": [
												{
													"key": "Verb",
													"value": "DELETE"
												},
												{
													"key": "UserName",
													"value": "webapi"
												},
												{
													"key": "DateRange.From",
													"value": "{{fechaActual}}",
													"disabled": true
												},
												{
													"key": "IdObject",
													"value": "{{IDMedicalControl}}"
												},
												{
													"key": "IdObjectType",
													"value": "67"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Se agrego un campo en el schema"
						},
						{
							"name": "104.6.2.AccidenteLaboral",
							"item": [
								{
									"name": "104.6.2.1.EnfermedadProfesional",
									"item": [
										{
											"name": "104.6.2.1.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.1.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 3,\r\n  \"idAction\": 1,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.1.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.1.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"AbsenceAlreadyRelated\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 3,\r\n  \"idAction\": 1,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.1.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.1.5.AuditSearchObjectTypeDELETE Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.2.2.InItinere",
									"item": [
										{
											"name": "104.6.2.2.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.2.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 3,\r\n  \"idAction\": 2,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.2.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":2,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.2.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"AbsenceAlreadyRelated\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 3,\r\n  \"idAction\": 2,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.2.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.2.5.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":2,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.2.3.AccidenteTrabajo",
									"item": [
										{
											"name": "104.6.2.3.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.3.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 3,\r\n  \"idAction\": 3,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.3.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.3.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"AbsenceAlreadyRelated\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 3,\r\n  \"idAction\": 3,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.3.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.2.3.5.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "104.6.3.Atencion Virtual",
							"item": [
								{
									"name": "104.6.3.1.Ausencia-Virtual",
									"item": [
										{
											"name": "104.6.3.1.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.1.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": 4,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.1.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.1.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"AbsenceNeededForAction\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": 4,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.1.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.1.5.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.3.2.Consulta-Virtual",
									"item": [
										{
											"name": "104.6.3.2.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.2.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": 5,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.2.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.2.3.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.2.4.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.3.3.Hisopado/PCR-Virtual",
									"item": [
										{
											"name": "104.6.3.3.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.3.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": 7,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.3.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":7,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"TestResult\\\":false,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.3.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"TestResultRequired\");",
															"    pm.expect(pm.response.text()).to.include(\"TestDateRequired\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": 7,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.3.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.3.5.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":7,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":\\\"2021-07-30T00:00:00\\\",\\\"TestResult\\\":false,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.3.4.Descanso-Virtual",
									"item": [
										{
											"name": "104.6.3.4.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.4.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": 6,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.4.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":6,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":5,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.4.3.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.3.4.4.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":6,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":5,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "104.6.4.Consultorio",
							"item": [
								{
									"name": "104.6.4.1.Ausencia",
									"item": [
										{
											"name": "104.6.4.1.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.1.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 4,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.1.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.1.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"AbsenceNeededForAction\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 4,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.1.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.1.5.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.4.2.Consulta",
									"item": [
										{
											"name": "104.6.4.2.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.2.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 5,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.2.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.2.3.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.2.4.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.4.3.Hisopado/PCR",
									"item": [
										{
											"name": "104.6.4.3.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.3.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 7,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.3.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":7,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"TestResult\\\":false,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.3.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"TestResultRequired\");",
															"    pm.expect(pm.response.text()).to.include(\"TestDateRequired\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 7,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.3.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.3.5.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":7,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":\\\"2021-07-30T00:00:00\\\",\\\"TestResult\\\":false,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "104.6.4.4.Descanso",
									"item": [
										{
											"name": "104.6.4.4.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.4.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 6,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.4.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":6,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":5,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.4.3.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.4.4.4.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":6,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":5,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "104.6.5.Domicilio",
							"item": [
								{
									"name": "104.6.5.1.Ausencia",
									"item": [
										{
											"name": "104.6.5.1.0.Doctors",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDDoctors1\",jsonData[0].id);",
															"var schema = {",
															"\t\"items\":{",
															"\t\t\"type\": \"object\",",
															"\t\t\"properties\": {",
															"\t\t\t\"id\": { \"type\": \"number\" },",
															"            \"firstName\": { \"type\": \"string\" },",
															"            \"lastName\": { \"type\": \"string\" },",
															"            \"enrollment\": { \"type\": \"string\" },",
															"            \"enrollmentExpirationDate\": { \"type\": [\"string\" , \"null\"]},",
															"            \"documentNumber\": { \"type\": \"string\" },",
															"            \"documentExpirationDate\": { \"type\": [\"string\" , \"null\"] },",
															"\t\t\t},",
															"\t\t\"required\": [\"id\", \"firstName\"],",
															"\t\t\"additionalProperties\": false",
															"}",
															"};",
															"",
															"",
															"pm.test('Doctor Schema is valid', function () {",
															"\tpm.response.to.have.jsonSchema(schema);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/doctors",
													"host": [
														"{{URI}}"
													],
													"path": [
														"doctors"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.5.1.1.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 4,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": \"2021-07-30T00:00:00.000Z\",\r\n  \"testResult\": false,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.5.1.2.AuditSearchObjectTypePOST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "POST"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObjectType",
															"value": "67"
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.5.1.3.MedicalControl-Negative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"AbsenceAlreadyRelated\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"tracking\": [],\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-07-30T00:00:00.000Z\",\r\n  \"idControlType\": 1,\r\n  \"idAction\": 4,\r\n  \"idMedicalService\": 42,\r\n  \"idOccupationalDoctor\": {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 5,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URI}}/medical-controls",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.5.1.4.MedicalControl",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
													"host": [
														"{{URI}}"
													],
													"path": [
														"medical-controls",
														"{{IDMedicalControl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "104.6.5.1.5.AuditSearchObjectTypeDELETE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has string\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
															"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
															"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
															"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
															"",
															"var schema = {",
															"    \"items\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"            \"id\": { \"type\": \"number\" },",
															"            \"origin\": { \"type\": \"string\" },",
															"            \"objectType\": { \"type\": \"string\" },",
															"            \"json\": { \"type\": \"string\" },",
															"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
															"            \"userName\": { \"type\": \"string\" },",
															"            \"creation\": { \"type\": \"string\" },",
															"            \"verb\": { \"type\": \"string\" },",
															"            \"idObject\": { \"type\": \"number\" },",
															"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
															"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
															"        },",
															"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
															"        \"additionalProperties\": false",
															"    }",
															"};",
															"",
															"pm.test('Audit Schema is valid', function () {",
															"    pm.response.to.have.jsonSchema(schema);",
															"});",
															"",
															"pm.test(\"Verify objectType\", function () {",
															"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
															"});",
															"",
															"pm.test(\"Verify previousJson\", function () {",
															"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify data\", function () {",
															"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":1,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
															"});",
															"",
															"pm.test(\"Verify verb\", function () {",
															"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
															"});",
															"",
															"pm.test(\"Verify idEntityParent\", function () {",
															"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
															"});",
															"",
															"pm.test(\"Verify idEntityTypeParent\", function () {",
															"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Autenticacion}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Tenant-Id",
														"type": "text",
														"value": "{{Tenant}}"
													}
												],
												"url": {
													"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
													"host": [
														"{{URI_Audit}}"
													],
													"path": [
														"Audit",
														"Search"
													],
													"query": [
														{
															"key": "Verb",
															"value": "DELETE"
														},
														{
															"key": "UserName",
															"value": "webapi"
														},
														{
															"key": "DateRange.From",
															"value": "{{fechaActual}}",
															"disabled": true
														},
														{
															"key": "IdObject",
															"value": "{{IDMedicalControl}}"
														},
														{
															"key": "IdObjectType",
															"value": "67"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "104.99.BORRAR-DatosAuxiliares",
					"item": [
						{
							"name": "104.99.1.Absences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences/{{IDAbsence}}",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences",
										"{{IDAbsence}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.99.5.OrganizationModelStructureType Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idOrganizationModel\": {{IDOrganizationModel}},\r\n  \"modelStructures\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/organization-model-structure-types",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-model-structure-types"
									]
								},
								"description": "Le asocia atributos al modelo recién creado"
							},
							"response": []
						},
						{
							"name": "105.99..OrganizatonModel Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Organization}}/organization-models/{{IDOrganizationModel}}",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-models",
										"{{IDOrganizationModel}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "105.MedicalControl-Seguimiento",
			"item": [
				{
					"name": "105.0.DatosAuxiliares",
					"item": [
						{
							"name": "105.0.1.PhysicalPerson",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDPhysicalPerson\",responseBody);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"Santiago\",\r\n    \"secondName\": \"\",\r\n    \"lastName\": \"Tario\",\r\n    \"secondLastName\": \"\",\r\n    \"dateOfBirth\": \"1971-02-23T00:00:00\",\r\n    \"gender\": 1,\r\n    \"maritalStatus\": {\r\n        \"id\": 12\r\n    },\r\n    \"idNationality\": 1,\r\n    \"idCountryOfBirth\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/physical-persons",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"physical-persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.2.Employee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idPerson\": {{IDPhysicalPerson}},\r\n    \"fileNumber\": \"{{IDPhysicalPerson}}\",\r\n    \"active\": true,\r\n    \"startDate\": \"2020-04-22T00:00:00.0000\",\r\n    \"endDate\": \"2020-04-22T00:00:00.0000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/employees",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.3.Phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDPhase\",responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var fecha = new Date();\r",
											"fecha.setUTCDate(fecha.getDate()+1);\r",
											"fecha.setUTCMonth(fecha.getMonth()+1);\r",
											"fecha.setUTCFullYear(fecha.getFullYear());\r",
											"\r",
											"var nuevafecha = fecha.toISOString();\r",
											"\r",
											"pm.environment.set(\"fechaBaja\", nuevafecha);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"value": "{{Tenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"active\": true,\r\n    \"holiday\": false,\r\n    \"salary\": false,\r\n    \"compensation\": false,\r\n    \"recognizedPhase\": false,\r\n    \"real\": false,\r\n    \"startDate\": \"2020-01-27T00:00:00.0000\",\r\n    \"endDate\": null,\r\n    \"idCause\": null,\r\n    \"idEmployee\": \"{{IDPhysicalPerson}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/phases",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"phases"
									]
								},
								"description": "Crea una fase"
							},
							"response": []
						},
						{
							"name": "105.0.4.AbsencesType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDAbsencesType\", jsonData.id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"name\": { \"type\": \"string\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"system\": { \"type\": \"boolean\" },",
											"            \"active\": { \"type\": \"boolean\" },",
											"            \"eventsMaxNumber\": { \"type\": [\"number\", \"null\"] },",
											"            \"monthlyQuota\": { \"type\": [\"number\", \"null\"] },",
											"            \"annualQuota\": { \"type\": [\"number\", \"null\"] },",
											"            \"reviewStatus\": { \"type\": [\"object\", \"null\"] },",
											"            \"occupationalHealth\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"name\", \"description\", \"system\", \"active\", \"eventsMaxNumber\", \"monthlyQuota\", \"annualQuota\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Absence Type Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences-type/8",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences-type",
										"8"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.5.OrganizationModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"postman.setEnvironmentVariable(\"IDOrganizationModel\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"name": "Content-Type",
										"type": "text",
										"value": "{{Autenticacion}}",
										"disabled": true
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"description\": \"Temporary Model para Health\",\r\n  \"defaultValue\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/organization-models",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-models"
									]
								},
								"description": "Crea un nuevo modelo organizacional para asociarlo al empleado recién creado"
							},
							"response": []
						},
						{
							"name": "105.0.6.Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"\tpm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"RelationshipType must be valid and have a body\", function () {",
											"\tpm.response.to.be.ok;",
											"\tpm.response.to.be.withBody; // body tiene que exitir",
											"\tpm.response.to.be.json; // además que sea un JSON válido",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDCompany\",jsonData[0].id);",
											"",
											"var schema = {",
											"\t\"items\": {",
											"\t\t\"type\": \"object\",",
											"\t\t\"properties\": {",
											"\t\t\t\"idStructureCompany\": { \"type\": \"number\" },",
											"\t\t\t\"idTercero\": { \"type\": \"number\" },",
											"\t\t\t\"idCountry\": { \"type\": \"number\" },",
											"\t\t\t\"activity\": { \"type\": [\"string\",  \"null\"] },",
											"\t\t\t\"abbreviated\": {\"type\": [\"string\",  \"null\"]  },",
											"\t\t\t\"webSite\": {\"type\": [\"string\",  \"null\"] },",
											"\t\t\t\"activityStartDate\": { \"type\": [\"string\",  \"null\"] },",
											"\t\t\t\"openingHours\": {\"type\": [\"string\",  \"null\"]  },",
											"\t\t\t\"idEmployerType\": { \"type\": \"number\" },",
											"\t\t\t\"idLegalRepresentative\": { \"type\": [\"number\",  \"null\"]  },",
											"\t\t\t\"branches\": { \"type\": \"array\" },",
											"\t\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\t\"description\": { \"type\": \"string\" },",
											"\t\t\t\"idStructureType\": { \"type\": \"number\" },",
											"\t\t\t\"externalCode\": {\"type\": [\"string\",  \"null\"]  },",
											"\t\t\t\"active\": { \"type\": \"boolean\" },",
											"\t\t\t\"structureType\": { \"type\": [\"number\", \"null\"] }",
											"\t\t},",
											"\t\t\"required\": [\"idStructureCompany\", \"idTercero\", \"idCountry\", \"activity\", \"abbreviated\", \"webSite\", \"activityStartDate\", \"openingHours\", \"idEmployerType\", \"branches\", \"idLegalRepresentative\", \"id\", \"description\", \"idStructureType\", \"externalCode\", \"active\", \"structureType\"],",
											"\t\t\"additionalProperties\": false",
											"\t}",
											"};",
											"",
											"pm.test('Company Structure Schema is valid', function () {",
											"\tpm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Organization}}/structures/10/Structures",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"structures",
										"10",
										"Structures"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.7.SituacionDeRevista",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var i=0;",
											"",
											"do",
											"{",
											"   postman.setEnvironmentVariable(\"IDSituacionRevista\",jsonData[i].id);",
											"   i++",
											"}",
											"while  (jsonData[i-1].description !='ACTIVO')",
											"",
											"var schema = {",
											"    \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"\t\t\"id\": { \"type\": \"number\" },",
											"\t\t\"description\": { \"type\": \"string\" },",
											"\t\t\"idStructureType\": { \"type\": \"number\" },",
											"\t\t\"externalCode\": { \"type\": [\"string\", \"null\"] },",
											"\t\t\"active\": { \"type\": \"boolean\" },",
											"\t\t\"structureType\": { \"type\": [\"number\", \"null\"] },",
											"    },",
											"    \"required\": [ \"id\", \"description\", \"idStructureType\", \"externalCode\", \"active\", \"structureType\"],",
											"    \"additionalProperties\": false",
											"    }",
											"};",
											"pm.test('Category Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Organization}}/structures/30/Structures",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"structures",
										"30",
										"Structures"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.8.OrganizationModelStructureType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idOrganizationModel\": {{IDOrganizationModel}},\r\n  \"modelStructures\": [\r\n    {\r\n      \"idTypeStructure\": 10,\r\n      \"orderTypeStructure\": 1,\r\n      \"required\": true,\r\n      \"defaultStructure\": {{IDCompany}}\r\n    },\r\n      {\r\n      \"idTypeStructure\": 30,\r\n      \"orderTypeStructure\": 3,\r\n      \"required\": true,\r\n      \"defaultStructure\": {{IDSituacionRevista}}\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/organization-model-structure-types",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-model-structure-types"
									]
								},
								"description": "Le asocia atributos al modelo recién creado"
							},
							"response": []
						},
						{
							"name": "105.0.9.EmployeeOrganizationModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idOrganizationModel\": {{IDOrganizationModel}},\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"startDate\": \"2010-04-22T00:00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/employee-organization-models",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"employee-organization-models"
									]
								},
								"description": "Le asocia el modelo 1 al empleado"
							},
							"response": []
						},
						{
							"name": "105.0.10.Absences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDAbsence\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idAbsenceType\": {{IDAbsencesType}},\r\n    \"idCertificate\": null,\r\n    \"idPathology\": 2,\r\n    \"description\": \"Temporary Absence\",\r\n    \"partial\": false,\r\n    \"numberOfHours\": null,\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"dateFrom\": \"2021-3-22T00:00:00.000Z\",\r\n    \"dateTo\": \"2021-3-22T00:00:00.000Z\",\r\n    \"idCountry\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.11.MedicalControlType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-control-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-control-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.12.MedicalControlActionsTypeControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDAction\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"createAbsence\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/control-types/{{IDControlType}}/actions",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"control-types",
										"{{IDControlType}}",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.13.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDDoctors1\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"firstName\": { \"type\": \"string\" },",
											"            \"lastName\": { \"type\": \"string\" },",
											"            \"enrollment\": { \"type\": \"string\" },",
											"            \"enrollmentExpirationDate\": { \"type\": [\"string\", \"null\"] },",
											"            \"documentNumber\": { \"type\": \"string\" },",
											"            \"documentExpirationDate\": { \"type\": [\"string\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"firstName\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Doctor Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/doctors",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.14.Absences2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDAbsence2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idAbsenceType\": {{IDAbsencesType}},\r\n    \"idCertificate\": null,\r\n    \"idPathology\": 2,\r\n    \"description\": \"Temporary Absence\",\r\n    \"partial\": false,\r\n    \"numberOfHours\": null,\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"dateFrom\": \"2021-08-01T00:00:00.000Z\",\r\n    \"dateTo\": \"2021-08-10T00:00:00.000Z\",\r\n    \"idCountry\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.15.Absences3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDAbsence3\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idAbsenceType\": {{IDAbsencesType}},\r\n    \"idCertificate\": null,\r\n    \"idPathology\": 2,\r\n    \"description\": \"Temporary Absence\",\r\n    \"partial\": false,\r\n    \"numberOfHours\": null,\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"dateFrom\": \"2021-8-24T00:00:00.000Z\",\r\n    \"dateTo\": \"2021-8-24T00:00:00.000Z\",\r\n    \"idCountry\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.0.16.Absences4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDAbsence4\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idAbsenceType\": {{IDAbsencesType}},\r\n    \"idCertificate\": null,\r\n    \"idPathology\": 2,\r\n    \"description\": \"Temporary Absence4\",\r\n    \"partial\": false,\r\n    \"numberOfHours\": null,\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"dateFrom\": \"2021-8-25T00:00:00.000Z\",\r\n    \"dateTo\": \"2021-8-25T00:00:00.000Z\",\r\n    \"idCountry\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "105.1.MedicalControl-Caso 1",
					"item": [
						{
							"name": "105.1.0.MedicalControlTrackingType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"            \"createAbsence\": { \"type\": \"boolean\" },",
											"        },",
											"        \"required\": [\"id\", \"description\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Medical Controls Tracking Ttypes Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/tracking-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"tracking-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.1.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"tracking\": [],\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-07-30T00:00:00.000Z\",\r\n    \"idControlType\": 3,\r\n    \"idAction\": 3,\r\n    \"idMedicalService\": 42,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.2.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.3.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData.idControlType);",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\" },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": \"string\", \"const\": \"Gripe\" },",
											"        \"idAbsence\": { \"type\": \"number\", \"const\": idAbsence },",
											"        \"idFile\": { \"type\": \"number\", \"const\": 0 },",
											"        \"breakTime\": { \"type\": \"number\", \"const\": 0 },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"], \"const\": null },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idEmployee\", function () {",
											"    pm.expect(jsonData.idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify date\", function () {",
											"    pm.expect(jsonData.date).is.to.equal(\"2021-07-30T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify idControlType\", function () {",
											"    pm.expect(jsonData.idControlType).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify idAction\", function () {",
											"    pm.expect(jsonData.idAction).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify idMedicalService\", function () {",
											"    pm.expect(jsonData.idMedicalService).is.to.equal(42);",
											"});",
											"",
											"pm.test(\"Verify idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify privateDoctorName\", function () {",
											"    pm.expect(jsonData.privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParprivateDoctorEnrollmentent\", function () {",
											"    pm.expect(jsonData.privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify diagnosis\", function () {",
											"    pm.expect(jsonData.diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify idAbsence\", function () {",
											"    pm.expect(jsonData.idAbsence).is.to.equal(idAbsence);",
											"});",
											"",
											"pm.test(\"Verify testDate\", function () {",
											"    pm.expect(jsonData.testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify testResult\", function () {",
											"    pm.expect(jsonData.testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParent\", function () {",
											"    pm.expect(jsonData.idParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.4.MedicalControlTracking-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"InvalidControlTypeForTracking\");",
											"    pm.expect(pm.response.text()).to.include(\"ActionNotNeededForTrackingControl\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": 3,\r\n    \"idAction\": 3,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 2,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.5.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": 4,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 1,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.6.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-01T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.7.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence\"));",
											"",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": \"string\", \"const\": \"Gripe\" },",
											"        \"idAbsence\": { \"type\": \"number\", \"const\": idAbsence },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.8.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-10-01T00:00:00.000Z\",\r\n    \"idControlType\": 4,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence2}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 3,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.9.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking2\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence2\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-10-01T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking2}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.10.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence\"));",
											"var idAbsence2 = Number(postman.getEnvironmentVariable(\"IDAbsence2\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": \"string\", \"const\": \"Gripe\" },",
											"        \"idAbsence\": { \"type\": \"number\", \"const\": idAbsence },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-10-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(idAbsence2);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].breakTime\", function () {",
											"    pm.expect(jsonData.tracking[0].breakTime).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[1].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].date\", function () {",
											"    pm.expect(jsonData.tracking[1].date).is.to.equal(\"2021-08-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[1].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idAction\", function () {",
											"    pm.expect(jsonData.tracking[1].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[1].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[1].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[1].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[1].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[1].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[1].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idFile\", function () {",
											"    pm.expect(jsonData.tracking[1].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].breakTime\", function () {",
											"    pm.expect(jsonData.tracking[1].breakTime).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].testDate\", function () {",
											"    pm.expect(jsonData.tracking[1].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].testResult\", function () {",
											"    pm.expect(jsonData.tracking[1].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idParent\", function () {",
											"    pm.expect(jsonData.tracking[1].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[1].idTrackingType).is.to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.11.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.12.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking2 = postman.getEnvironmentVariable(\"IDMedicalControlTracking2\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence2\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControlTracking2 + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-10-01T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControlTracking2}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking2}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.13.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.14.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-01T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControlTracking}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.15.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.16.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControl}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.1.17.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "105.2.MedicalControl-Caso 2",
					"item": [
						{
							"name": "105.2.1.MedicalControlTrackingType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDTrackingType\", jsonData[0].id);",
											"postman.setEnvironmentVariable(\"IDTrackingType2\", jsonData[1].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"            \"createAbsence\": { \"type\": \"boolean\" },",
											"        },",
											"        \"required\": [\"id\", \"description\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Medical Controls Tracking Ttypes Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/tracking-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"tracking-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.2.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"IDMedicalControl\",pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"tracking\": [],\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-07-30T00:00:00.000Z\",\r\n    \"idControlType\": 3,\r\n    \"idAction\": 3,\r\n    \"idMedicalService\": 42,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.3.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.4.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData.idControlType);",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\" },",
											"        \"idEmployee\": { \"type\": \"number\" },",
											"        \"date\": { \"type\": \"string\" },",
											"        \"idControlType\": { \"type\": \"number\" },",
											"        \"idAction\": { \"type\": \"number\" },",
											"        \"idMedicalService\": { \"type\": \"number\" },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"] },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"] },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"] },",
											"        \"diagnosis\": { \"type\": \"string\" },",
											"        \"idAbsence\": { \"type\": \"number\" },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idEmployee\", function () {",
											"    pm.expect(jsonData.idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify date\", function () {",
											"    pm.expect(jsonData.date).is.to.equal(\"2021-07-30T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify idControlType\", function () {",
											"    pm.expect(jsonData.idControlType).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify idAction\", function () {",
											"    pm.expect(jsonData.idAction).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify idMedicalService\", function () {",
											"    pm.expect(jsonData.idMedicalService).is.to.equal(42);",
											"});",
											"",
											"pm.test(\"Verify idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify privateDoctorName\", function () {",
											"    pm.expect(jsonData.privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParprivateDoctorEnrollmentent\", function () {",
											"    pm.expect(jsonData.privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify diagnosis\", function () {",
											"    pm.expect(jsonData.diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify idAbsence\", function () {",
											"    pm.expect(jsonData.idAbsence).is.to.equal(idAbsence);",
											"});",
											"",
											"pm.test(\"Verify testDate\", function () {",
											"    pm.expect(jsonData.testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify testResult\", function () {",
											"    pm.expect(jsonData.testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParent\", function () {",
											"    pm.expect(jsonData.idParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.5.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"IDMedicalControlTracking\",pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": 4,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence2}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 2,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.6.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence2\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-01T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":2,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.7.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence2\"));",
											"",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": \"string\", \"const\": \"Gripe\" },",
											"        \"idAbsence\": { \"type\": \"number\" },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(idAbsence);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.8.MedicalControlTracking-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"PreviousTrackingTypeShouldBeMedicalRelease\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": 4,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": 3,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 3,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.9.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-11T00:00:00.000Z\",\r\n    \"idControlType\": 4,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence3}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 5,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.10.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking2\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence3\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-11T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking2}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.11.MedicalControlRectify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"oldAbsenceId\": {{IDAbsence3}},\r\n    \"newAbsenceId\": {{IDAbsence4}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls/absence-rectify",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"absence-rectify"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.12.AuditSearchObjectTypePUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking2\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence4\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] }",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-11T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"PUT\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?UserName=webapi&Verb=PUT&IdObject={{IDMedicalControlTracking2}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "Verb",
											"value": "PUT"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking2}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.13.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData.idControlType);",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idAbsence2 = Number(postman.getEnvironmentVariable(\"IDAbsence2\"));",
											"var idAbsence4 = Number(postman.getEnvironmentVariable(\"IDAbsence4\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\" },",
											"        \"idEmployee\": { \"type\": \"number\" },",
											"        \"date\": { \"type\": \"string\" },",
											"        \"idControlType\": { \"type\": \"number\" },",
											"        \"idAction\": { \"type\": \"number\" },",
											"        \"idMedicalService\": { \"type\": \"number\" },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"] },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"] },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"] },",
											"        \"diagnosis\": { \"type\": \"string\" },",
											"        \"idAbsence\": { \"type\": \"number\" },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-11T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(idAbsence4);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].breakTime\", function () {",
											"    pm.expect(jsonData.tracking[0].breakTime).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tractracking[0].idParentking\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[1].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].date\", function () {",
											"    pm.expect(jsonData.tracking[1].date).is.to.equal(\"2021-08-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[1].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idAction\", function () {",
											"    pm.expect(jsonData.tracking[1].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[1].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[1].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[1].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[1].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[1].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[1].idAbsence).is.to.equal(idAbsence2);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idFile\", function () {",
											"    pm.expect(jsonData.tracking[1].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].breakTime\", function () {",
											"    pm.expect(jsonData.tracking[1].breakTime).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].testDate\", function () {",
											"    pm.expect(jsonData.tracking[1].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].testResult\", function () {",
											"    pm.expect(jsonData.tracking[1].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idParent\", function () {",
											"    pm.expect(jsonData.tracking[1].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[1].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[1].idTrackingType).is.to.equal(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.5.2.14.MedicalControl-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"OnlyLastControlTrackingCanBeDeleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.5.2.15.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.16.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking2\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence4\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-11T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControlTracking2}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking2}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.5.2.17.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.18.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence2\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-01T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":2,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControlTracking}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.5.2.19.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.20.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControl}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControl}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.2.21.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "105.3.MedicalControl-Caso 3",
					"item": [
						{
							"name": "105.3.1.MedicalControlTrackingType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"            \"createAbsence\": { \"type\": \"boolean\" },",
											"        },",
											"        \"required\": [\"id\", \"description\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Medical Controls Tracking Ttypes Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/tracking-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"tracking-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.2.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"tracking\": [],\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-07-30T00:00:00.000Z\",\r\n    \"idControlType\": 3,\r\n    \"idAction\": 3,\r\n    \"idMedicalService\": 42,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.3.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.4.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData.idControlType);",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\" },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": \"string\", \"const\": \"Gripe\" },",
											"        \"idAbsence\": { \"type\": \"number\", \"const\": idAbsence },",
											"        \"idFile\": { \"type\": \"number\", \"const\": 0 },",
											"        \"breakTime\": { \"type\": \"number\", \"const\": 0 },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"], \"const\": null },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idEmployee\", function () {",
											"    pm.expect(jsonData.idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify date\", function () {",
											"    pm.expect(jsonData.date).is.to.equal(\"2021-07-30T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify idControlType\", function () {",
											"    pm.expect(jsonData.idControlType).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify idAction\", function () {",
											"    pm.expect(jsonData.idAction).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify idMedicalService\", function () {",
											"    pm.expect(jsonData.idMedicalService).is.to.equal(42);",
											"});",
											"",
											"pm.test(\"Verify idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify privateDoctorName\", function () {",
											"    pm.expect(jsonData.privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParprivateDoctorEnrollmentent\", function () {",
											"    pm.expect(jsonData.privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify diagnosis\", function () {",
											"    pm.expect(jsonData.diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify idAbsence\", function () {",
											"    pm.expect(jsonData.idAbsence).is.to.equal(idAbsence);",
											"});",
											"",
											"pm.test(\"Verify testDate\", function () {",
											"    pm.expect(jsonData.testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify testResult\", function () {",
											"    pm.expect(jsonData.testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParent\", function () {",
											"    pm.expect(jsonData.idParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.5.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": 4,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 4,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.6.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-01T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\"+ idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.7.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idMedicalControlTracking = Number(postman.getEnvironmentVariable(\"IDMedicalControlTracking\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": \"string\", \"const\": \"Gripe\" },",
											"        \"idAbsence\": { \"type\": \"number\", \"const\": idAbsence },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParprivateDoctorEnrollmentent\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].breakTime\", function () {",
											"    pm.expect(jsonData.tracking[0].breakTime).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify idAction\", function () {",
											"    pm.expect(jsonData.idAction).is.to.equal(3);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.8.MedicalControlTracking-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"PreviousTrackingTypeShouldBeMedicalRelease\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-08-02T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": null,\r\n  \"idMedicalService\": 10,\r\n  \"idOccupationalDoctor\":  {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": 3,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": {{IDMedicalControl}},\r\n  \"idTrackingType\": 3,\r\n  \"pathologies\": [  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.9.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.10.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-01T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":4,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControlTracking}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.11.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-08-02T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": null,\r\n  \"idMedicalService\": 10,\r\n  \"idOccupationalDoctor\":  {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": null,\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": {{IDMedicalControl}},\r\n  \"idTrackingType\": 1,\r\n  \"pathologies\": [  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.12.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-02T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.13.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idMedicalControlTracking = Number(postman.getEnvironmentVariable(\"IDMedicalControlTracking\"));",
											"var idMedicalControlTracking2 = Number(postman.getEnvironmentVariable(\"IDMedicalControlTracking2\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 3 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": \"string\", \"const\": \"Gripe\" },",
											"        \"idAbsence\": { \"type\": \"number\", \"const\": idAbsence },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-02T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(4);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParprivateDoctorEnrollmentent\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].breakTime\", function () {",
											"    pm.expect(jsonData.tracking[0].breakTime).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.14.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"idEmployee\": {{IDPhysicalPerson}},\r\n  \"date\": \"2021-08-03T00:00:00.000Z\",\r\n  \"idControlType\": 4,\r\n  \"idAction\": null,\r\n  \"idMedicalService\": 10,\r\n  \"idOccupationalDoctor\":  {{IDDoctors1}},\r\n  \"privateDoctorName\": null,\r\n  \"privateDoctorEnrollment\": null,\r\n  \"diagnosis\": \"Gripe\",\r\n  \"idAbsence\": {{IDAbsence2}},\r\n  \"idFile\": 0,\r\n  \"breakTime\": 0,\r\n  \"testDate\": null,\r\n  \"testResult\": null,\r\n  \"idParent\": {{IDMedicalControl}},\r\n  \"idTrackingType\": 5,\r\n  \"pathologies\": [  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.15.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking2\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence2\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-03T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\"+idAbsence+\"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking2}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.5.3.16.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.17.AuditSearchObjectTypeDELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking2\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence2\");",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": \"string\" },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Tracking\\\":null,\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-03T00:00:00\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\"+idAbsence+\"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":5,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"DELETE\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=DELETE&UserName=webapi&IdObject={{IDMedicalControlTracking2}}&IdObjectType=67",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "DELETE"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking2}}"
										},
										{
											"key": "IdObjectType",
											"value": "67"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.18.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.19.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-02T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":4,\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.20.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.21.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\")",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\")",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":3,\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":3,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":5,\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.3.22.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "105.4.MedicalControl-Caso 4",
					"item": [
						{
							"name": "105.4.1.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"tracking\": [],\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-07-30T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": 9,\r\n    \"idMedicalService\": 42,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.2.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData.idControlType);",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\" },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\", \"const\": 9 },",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\", \"const\": 0 },",
											"        \"breakTime\": { \"type\": \"number\", \"const\": 0 },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"], \"const\": null },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idEmployee\", function () {",
											"    pm.expect(jsonData.idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify date\", function () {",
											"    pm.expect(jsonData.date).is.to.equal(\"2021-07-30T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify idControlType\", function () {",
											"    pm.expect(jsonData.idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify idAction\", function () {",
											"    pm.expect(jsonData.idAction).is.to.equal(9);",
											"});",
											"",
											"pm.test(\"Verify idMedicalService\", function () {",
											"    pm.expect(jsonData.idMedicalService).is.to.equal(42);",
											"});",
											"",
											"pm.test(\"Verify idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify privateDoctorName\", function () {",
											"    pm.expect(jsonData.privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParprivateDoctorEnrollmentent\", function () {",
											"    pm.expect(jsonData.privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify diagnosis\", function () {",
											"    pm.expect(jsonData.diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idAbsence\", function () {",
											"    pm.expect(jsonData.idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify testDate\", function () {",
											"    pm.expect(jsonData.testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify testResult\", function () {",
											"    pm.expect(jsonData.testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParent\", function () {",
											"    pm.expect(jsonData.idParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.3.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 6,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.4.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\"},",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(6);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.5.MedicalControlTracking-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ComplaintHasRejection\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-02T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 6,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.6.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.7.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 4,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.8.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\"},",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-01T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.9.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-02T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 6,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.10.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\", \"const\": \"2021-07-30T00:00:00\", },",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\"},",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-02T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(6);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.12.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.13.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.14.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-02T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": {{IDAbsence2}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 7,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.15.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence2\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\"},",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\"},",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-02T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(idAbsence);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(7);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.16.MedicalControlTracking-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ComplaintHasAbsence\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-11T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 6,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.17.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-11T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 1,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.18.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\"},",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\"},",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-11T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.19.MedicalControlTracking-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"ComplaintHasAbsence\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-11T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 6,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.20.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.21.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-11T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 4,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.22.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.23.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-11T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": {{IDAbsence3}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 5,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.24.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence3\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\"},",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\"},",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-11T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(idAbsence);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(5);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.25.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.26.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking2\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-11T00:00:00.000Z\",\r\n    \"idControlType\": 5,\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": null,\r\n    \"idAbsence\": {{IDAbsence3}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\":2,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.27.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = Number(postman.getEnvironmentVariable(\"IDPhysicalPerson\"));",
											"var idDoctors1 = Number(postman.getEnvironmentVariable(\"IDDoctors1\"));",
											"var idMedicalControl = Number(postman.getEnvironmentVariable(\"IDMedicalControl\"));",
											"var idAbsence = Number(postman.getEnvironmentVariable(\"IDAbsence3\"));",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": { \"type\": \"array\" },",
											"        \"id\": { \"type\": \"number\", \"const\": idMedicalControl },",
											"        \"idEmployee\": { \"type\": \"number\", \"const\": idPhysicalPerson },",
											"        \"date\": { \"type\": \"string\"},",
											"        \"idControlType\": { \"type\": \"number\", \"const\": 5 },",
											"        \"idAction\": { \"type\": \"number\"},",
											"        \"idMedicalService\": { \"type\": \"number\", \"const\": 42 },",
											"        \"idOccupationalDoctor\": { \"type\": [\"number\", \"null\"], \"const\": 5 },",
											"        \"privateDoctorName\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"privateDoctorEnrollment\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"diagnosis\": { \"type\": [\"string\", \"null\"], \"const\": null },",
											"        \"idAbsence\": { \"type\": [\"number\", \"null\"], \"const\": null },",
											"        \"idFile\": { \"type\": \"number\" },",
											"        \"breakTime\": { \"type\": \"number\" },",
											"        \"testDate\": { \"type\": [\"string\", \"null\"] },",
											"        \"testResult\": { \"type\": [\"boolean\", \"null\"] },",
											"        \"idParent\": { \"type\": [\"number\", \"null\"] },",
											"        \"idTrackingType\": { \"type\": [\"number\", \"null\"] },",
											"        \"pathologies\": { \"type\": \"array\" },",
											"        \"idFileComplaint\":  { \"type\": [\"number\",\"null\"]},",
											"    },",
											"    \"required\": [\"id\", \"idEmployee\", \"date\", \"idControlType\", \"idAction\", \"idMedicalService\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"Verify tracking[0].idEmployee\", function () {",
											"    pm.expect(jsonData.tracking[0].idEmployee).is.to.equal(idPhysicalPerson);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].date\", function () {",
											"    pm.expect(jsonData.tracking[0].date).is.to.equal(\"2021-08-11T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idControlType\", function () {",
											"    pm.expect(jsonData.tracking[0].idControlType).is.to.equal(5);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAction\", function () {",
											"    pm.expect(jsonData.tracking[0].idAction).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idMedicalService\", function () {",
											"    pm.expect(jsonData.tracking[0].idMedicalService).is.to.equal(10);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.tracking[0].idOccupationalDoctor).is.to.equal(idDoctors1);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorName\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.tracking[0].privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].diagnosis\", function () {",
											"    pm.expect(jsonData.tracking[0].diagnosis).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idAbsence\", function () {",
											"    pm.expect(jsonData.tracking[0].idAbsence).is.to.equal(idAbsence);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idFile\", function () {",
											"    pm.expect(jsonData.tracking[0].idFile).is.to.equal(0);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testDate\", function () {",
											"    pm.expect(jsonData.tracking[0].testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].testResult\", function () {",
											"    pm.expect(jsonData.tracking[0].testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idParent\", function () {",
											"    pm.expect(jsonData.tracking[0].idParent).is.to.equal(idMedicalControl);",
											"});",
											"",
											"pm.test(\"Verify tracking[0].idTrackingType\", function () {",
											"    pm.expect(jsonData.tracking[0].idTrackingType).is.to.equal(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.28.MedicalControlTracking2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking2}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.29.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.30.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.4.31.MedicalControlbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}?tracking=true",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									],
									"query": [
										{
											"key": "tracking",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/*",
									"======================================================================",
									"Se crea un control medico \"Denuncia (5)\".",
									"Luego se crean las distintas variaciones de Seguimientos:",
									"",
									"* Rechazo (6)",
									"* Revision (4) y Rechazo (6)",
									"* Generacion de Ausencia (7) y Rechazo (6) Caso NEGATIVO",
									"* Generacion de Ausencia (7) y Alta de Paciente (1)",
									"* Generacion de Ausencia (7) y Revision (4)",
									"* Generacion de Ausencia (7) y Ausencia no Avalada (5)",
									"* Generacion de Ausencia (7) y Extensión de la Ausencia (2)",
									"======================================================================",
									"*/"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "105.99.BORRAR-DatosAuxiliares",
					"item": [
						{
							"name": "105.99.1.Absences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences/{{IDAbsence}}",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences",
										"{{IDAbsence}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.99.2.Absences2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences/{{IDAbsence2}}",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences",
										"{{IDAbsence2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.99.3.Absences3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences/{{IDAbsence3}}",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences",
										"{{IDAbsence3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.99.4.Absences4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences/{{IDAbsence4}}",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences",
										"{{IDAbsence4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "105.99.5.OrganizationModelStructureType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{Autenticacion}}"
									},
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idOrganizationModel\": {{IDOrganizationModel}},\r\n  \"modelStructures\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/organization-model-structure-types",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-model-structure-types"
									]
								},
								"description": "Le asocia atributos al modelo recién creado"
							},
							"response": []
						},
						{
							"name": "105.99.6.OrganizatonModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Organization}}/organization-models/{{IDOrganizationModel}}",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-models",
										"{{IDOrganizationModel}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "No puede haber dos seguimientos el mismo día a la misma hora.\nSi ya existe un seguimiento, y se intenta cargar otro, el nuevo no puede tener fecha anterior al existente"
		},
		{
			"name": "106.MedicalControlByAbsences",
			"item": [
				{
					"name": "106.1DatosAuxiliares",
					"item": [
						{
							"name": "106.1.1.PhysicalPerson",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDPhysicalPerson\",responseBody);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"name\": \"Santiago\",\r\n    \"secondName\": \"\",\r\n    \"lastName\": \"Tario\",\r\n    \"secondLastName\": \"\",\r\n    \"dateOfBirth\": \"1971-02-23T00:00:00\",\r\n    \"gender\": 1,\r\n    \"maritalStatus\": {\r\n        \"id\": 12\r\n    },\r\n    \"idNationality\": 1,\r\n    \"idCountryOfBirth\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/physical-persons",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"physical-persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.1.2.Employee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idPerson\": {{IDPhysicalPerson}},\r\n    \"fileNumber\": \"{{IDPhysicalPerson}}\",\r\n    \"active\": true,\r\n    \"startDate\": \"2020-04-22T00:00:00.0000\",\r\n    \"endDate\": \"2020-04-22T00:00:00.0000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/employees",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.1.3.Phase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDPhase\",responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var fecha = new Date();\r",
											"fecha.setUTCDate(fecha.getDate()+1);\r",
											"fecha.setUTCMonth(fecha.getMonth()+1);\r",
											"fecha.setUTCFullYear(fecha.getFullYear());\r",
											"\r",
											"var nuevafecha = fecha.toISOString();\r",
											"\r",
											"pm.environment.set(\"fechaBaja\", nuevafecha);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"value": "{{Tenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"active\": true,\r\n    \"holiday\": false,\r\n    \"salary\": false,\r\n    \"compensation\": false,\r\n    \"recognizedPhase\": false,\r\n    \"real\": false,\r\n    \"startDate\": \"2020-01-27T00:00:00.0000\",\r\n    \"endDate\": null,\r\n    \"idCause\": null,\r\n    \"idEmployee\": \"{{IDPhysicalPerson}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Person}}/phases",
									"host": [
										"{{URI_Person}}"
									],
									"path": [
										"phases"
									]
								},
								"description": "Crea una fase"
							},
							"response": []
						},
						{
							"name": "106.1.4.Pathology",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDPathology\", jsonData[0].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Pathology Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData[0].id).is.to.equal(10016);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData[0].description).is.to.equal(\"Asfixia del nacimiento - P21 - Afecciones originadas en el periodo neonatal\");",
											"});",
											"",
											"pm.test(\"Verify id\", function () {",
											"    pm.expect(jsonData[2].id).is.to.equal(10053);",
											"});",
											"",
											"pm.test(\"Verify description\", function () {",
											"    pm.expect(jsonData[2].description).is.to.equal(\"Convulsiones del recién nacido - P90 - Afecciones originadas en el periodo neonatal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/pathologies?pathologyFilter=neonatal",
									"host": [
										"{{URI}}"
									],
									"path": [
										"pathologies"
									],
									"query": [
										{
											"key": "pathologyFilter",
											"value": "neonatal"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "106.1.5.AbsencesType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDAbsencesType\", jsonData.id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"name\": { \"type\": \"string\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"system\": { \"type\": \"boolean\" },",
											"            \"active\": { \"type\": \"boolean\" },",
											"            \"eventsMaxNumber\": { \"type\": [\"number\", \"null\"] },",
											"            \"monthlyQuota\": { \"type\": [\"number\", \"null\"] },",
											"            \"annualQuota\": { \"type\": [\"number\", \"null\"] },",
											"            \"reviewStatus\": { \"type\": [\"object\", \"null\"] },",
											"            \"occupationalHealth\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"name\", \"description\", \"system\", \"active\", \"eventsMaxNumber\", \"monthlyQuota\", \"annualQuota\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Absence Type Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences-type/8",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences-type",
										"8"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.1.6.OrganizationModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" },",
											"            \"defaultValue\": { \"type\": \"boolean\" },",
											"        },",
											"        \"required\": [\"id\", \"description\", \"defaultValue\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Organization Model Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"var IDOrganizationModel1 = jsonData[0].id",
											"pm.environment.set(\"IDOrganizationModel1\", IDOrganizationModel1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"value": "{{Tenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URI_Organization}}/organization-models",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"organization-models"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.1.7.EmployeeOrganizationModel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idOrganizationModel\": {{IDOrganizationModel1}},\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"startDate\": \"2018-07-03T00:00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Organization}}/employee-organization-models",
									"host": [
										"{{URI_Organization}}"
									],
									"path": [
										"employee-organization-models"
									]
								},
								"description": "Le asocia el modelo 1 al empleado"
							},
							"response": []
						},
						{
							"name": "106.1.8.Absences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"IDAbsence\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idAbsenceType\": {{IDAbsencesType}},\r\n    \"idCertificate\": null,\r\n    \"idPathology\": {{IDPathology}},\r\n    \"description\": \"Temporary Absence\",\r\n    \"partial\": false,\r\n    \"numberOfHours\": null,\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"dateFrom\": \"2021-3-22T00:00:00.000Z\",\r\n    \"dateTo\": \"2021-3-22T00:00:00.000Z\",\r\n    \"idCountry\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "106.2.MedicalControlByAbsences",
					"item": [
						{
							"name": "106.2.1.MedicalControlType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDControlType\", jsonData[0].id);",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-control-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-control-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.2.MedicalControlActionsTypeControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDAction\", jsonData[0].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": [\"string\", \"null\"] },",
											"            \"createAbsence\": { \"type\": \"boolean\" }",
											"        },",
											"        \"required\": [\"id\", \"createAbsence\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/control-types/{{IDControlType}}/actions",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"control-types",
										"{{IDControlType}}",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.3.Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDDoctors1\", jsonData[0].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"firstName\": { \"type\": \"string\" },",
											"            \"lastName\": { \"type\": \"string\" },",
											"            \"enrollment\": { \"type\": \"string\" },",
											"            \"enrollmentExpirationDate\": { \"type\": [\"string\", \"null\"] },",
											"            \"documentNumber\": { \"type\": \"string\" },",
											"            \"documentExpirationDate\": { \"type\": [\"string\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"firstName\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"",
											"pm.test('Doctor Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/doctors",
									"host": [
										"{{URI}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.4.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControl\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"tracking\": [],\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-07-30T00:00:00.000Z\",\r\n    \"idControlType\": {{IDControlType}},\r\n    \"idAction\": {{IDAction}},\r\n    \"idMedicalService\": 42,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.5.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControl = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idControlType = postman.getEnvironmentVariable(\"IDControlType\");",
											"var idAction = postman.getEnvironmentVariable(\"IDAction\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControl + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-07-30T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":\" + idControlType + \",\\\"Description\\\":null},\\\"Action\\\":{\\\"Id\\\":\" + idAction + \",\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"MedicalService\\\":{\\\"Id\\\":42,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":{\\\"Id\\\":\" + idAbsence + \"},\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":null,\\\"TrackingType\\\":null,\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControl}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControl}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.6.MedicalControlType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"postman.setEnvironmentVariable(\"IDControlType1\", jsonData[1].id);",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"description\": { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"id\", \"description\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Medical Control Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-control-types",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-control-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.7.MedicalControlNegativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"tracking\": [],\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-07-30T00:00:00.000Z\",\r\n    \"idControlType\": {{IDControlType}},\r\n    \"idAction\": {{IDAction}},\r\n    \"idMedicalService\": 42,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": {{IDAbsence}},\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.8.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"postman.setEnvironmentVariable(\"IDMedicalControlTracking\",responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 0,\r\n    \"idEmployee\": {{IDPhysicalPerson}},\r\n    \"date\": \"2021-08-01T00:00:00.000Z\",\r\n    \"idControlType\": {{IDControlType1}},\r\n    \"idAction\": null,\r\n    \"idMedicalService\": 10,\r\n    \"idOccupationalDoctor\": {{IDDoctors1}},\r\n    \"privateDoctorName\": null,\r\n    \"privateDoctorEnrollment\": null,\r\n    \"diagnosis\": \"Gripe\",\r\n    \"idAbsence\": null,\r\n    \"idFile\": 0,\r\n    \"breakTime\": 0,\r\n    \"testDate\": null,\r\n    \"testResult\": null,\r\n    \"idParent\": {{IDMedicalControl}},\r\n    \"idTrackingType\": 1,\r\n    \"pathologies\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/medical-controls",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.9.AuditSearchObjectTypePOST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idMedicalControlTracking = postman.getEnvironmentVariable(\"IDMedicalControlTracking\");",
											"var idEmployee = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idControlType = postman.getEnvironmentVariable(\"IDControlType1\");",
											"var idOccupationalDoctor = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idParent = postman.getEnvironmentVariable(\"IDMedicalControl\");",
											"",
											"var schema = {",
											"    \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"origin\": { \"type\": \"string\" },",
											"            \"objectType\": { \"type\": [\"string\", \"null\"] },",
											"            \"json\": { \"type\": \"string\" },",
											"            \"previousJson\": { \"type\": [\"string\", \"null\"] },",
											"            \"userName\": { \"type\": \"string\" },",
											"            \"creation\": { \"type\": \"string\" },",
											"            \"verb\": { \"type\": \"string\" },",
											"            \"idObject\": { \"type\": \"number\" },",
											"            \"idEntityParent\": { \"type\": [\"number\", \"null\"] },",
											"            \"idEntityTypeParent\": { \"type\": [\"number\", \"null\"] },",
											"        },",
											"        \"required\": [\"id\", \"origin\", \"objectType\", \"json\", \"previousJson\", \"userName\", \"creation\", \"verb\", \"idObject\", \"idEntityParent\", \"idEntityTypeParent\"],",
											"        \"additionalProperties\": false",
											"    }",
											"};",
											"",
											"pm.test('Audit Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify objectType\", function () {",
											"    pm.expect(jsonData[0].objectType).is.to.equal(\"MedicalControl\");",
											"});",
											"",
											"pm.test(\"Verify previousJson\", function () {",
											"    pm.expect(jsonData[0].previousJson).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify data\", function () {",
											"    pm.expect(jsonData[0].json).is.to.equal(\"{\\\"Id\\\":\" + idMedicalControlTracking + \",\\\"Employee\\\":{\\\"Id\\\":\" + idEmployee + \"},\\\"Date\\\":\\\"2021-08-01T00:00:00Z\\\",\\\"ControlType\\\":{\\\"Id\\\":\" + idControlType + \",\\\"Description\\\":null},\\\"Action\\\":null,\\\"MedicalService\\\":{\\\"Id\\\":10,\\\"Company\\\":null,\\\"Phone\\\":null},\\\"OccupationalDoctor\\\":{\\\"Id\\\":\" + idOccupationalDoctor + \",\\\"FirstName\\\":null,\\\"LastName\\\":null,\\\"Enrollment\\\":null,\\\"EnrollmentExpirationDate\\\":null,\\\"DocumentNumber\\\":null,\\\"DocumentExpirationDate\\\":null},\\\"PrivateDoctorName\\\":null,\\\"PrivateDoctorEnrollment\\\":null,\\\"Diagnosis\\\":\\\"Gripe\\\",\\\"Absence\\\":null,\\\"IdFile\\\":0,\\\"BreakTime\\\":0,\\\"TestDate\\\":null,\\\"TestResult\\\":null,\\\"IdParent\\\":\" + idParent + \",\\\"TrackingType\\\":{\\\"Id\\\":1,\\\"Description\\\":null,\\\"CreateAbsence\\\":false},\\\"Pathologies\\\":[],\\\"IdFileComplaint\\\":null}\");",
											"});",
											"",
											"pm.test(\"Verify verb\", function () {",
											"    pm.expect(jsonData[0].verb).is.to.equal(\"POST\");",
											"});",
											"",
											"pm.test(\"Verify idEntityParent\", function () {",
											"    pm.expect(jsonData[0].idEntityParent).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idEntityTypeParent\", function () {",
											"    pm.expect(jsonData[0].idEntityTypeParent).is.to.equal(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Audit}}/Audit/Search?Verb=POST&UserName=webapi&IdObjectType=67&IdObject={{IDMedicalControlTracking}}",
									"host": [
										"{{URI_Audit}}"
									],
									"path": [
										"Audit",
										"Search"
									],
									"query": [
										{
											"key": "Verb",
											"value": "POST"
										},
										{
											"key": "UserName",
											"value": "webapi"
										},
										{
											"key": "DateRange.From",
											"value": "{{fechaActual}}",
											"disabled": true
										},
										{
											"key": "IdObjectType",
											"value": "67"
										},
										{
											"key": "IdObject",
											"value": "{{IDMedicalControlTracking}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "106.2.10.AbsenceReopening-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"}); ",
											" var jsonData = pm.response.json(); ",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"AbsenceTypeDenyReopeningOperation\");",
											"});",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idAbsenceType\": {{IDAbsencesType}},\r\n  \"idCertificate\": null,\r\n  \"idPathology\": {{IDPathology}},\r\n  \"description\": \"string\",\r\n  \"partial\": false,\r\n  \"numberOfHours\": null,\r\n  \"id\": {{IDAbsence}},\r\n  \"idEmployee\":  {{IDPhysicalPerson}},\r\n  \"dateFrom\": \"2021-11-18T17:57:07.557Z\",\r\n  \"dateTo\": \"2021-11-18T17:57:07.557Z\",\r\n  \"idCountry\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI_Absences}}/absences/reopening",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences",
										"reopening"
									]
								},
								"description": "Se valida que al hacer una reapertura de una ausencia por enfermedad desde el BE acompañando el error 400 aparezca un mensaje   que indica que el tipo de ausencia no es válido para realizar un tipo de acción de reapertura. Desde el FE el tipo de acción reapertura no está disponible para seleccionar desde el desplegable si la ausencia no es del tipo Accidente."
							},
							"response": []
						},
						{
							"name": "106.2.11.MedicalControlTrackingByAbsences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var idPhysicalPerson = postman.getEnvironmentVariable(\"IDPhysicalPerson\");",
											"var idControlType = postman.getEnvironmentVariable(\"IDControlType\");",
											"var idAction = postman.getEnvironmentVariable(\"IDAction\");",
											"var idDoctors1 = postman.getEnvironmentVariable(\"IDDoctors1\");",
											"var idAbsence = postman.getEnvironmentVariable(\"IDAbsence\");",
											"",
											"var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"tracking\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"idEmployee\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"date\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"idControlType\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"idAction\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"idMedicalService\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"idOccupationalDoctor\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"privateDoctorName\": {",
											"                            \"type\": [\"string\", \"null\"]",
											"                        },",
											"                        \"privateDoctorEnrollment\": {",
											"                            \"type\": [\"string\", \"null\"]",
											"                        },",
											"                        \"diagnosis\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"idAbsence\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"idFile\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"breakTime\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"testDate\": {",
											"                            \"type\": [\"string\", \"null\"]",
											"                        },",
											"                        \"testResult\": {",
											"                            \"type\": [\"boolean\", \"null\"]",
											"                        },",
											"                        \"idParent\": {",
											"                            \"type\": [\"integer\", \"null\"]",
											"                        },",
											"                        \"idTrackingType\": {",
											"                            \"type\": [\"integer\", \"null\"]",
											"                        },",
											"                        \"pathologies\": {",
											"                            \"type\": \"array\",",
											"                            \"items\": [",
											"                                {",
											"                                    \"type\": \"object\",",
											"                                    \"properties\": {",
											"                                        \"id\": {",
											"                                            \"type\": \"integer\"",
											"                                        },",
											"                                        \"description\": {",
											"                                            \"type\": \"string\"",
											"                                        }",
											"                                    },",
											"                                    \"required\": [",
											"                                        \"id\",",
											"                                        \"description\"",
											"                                    ]",
											"                                }",
											"                            ]",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"idEmployee\",",
											"                        \"date\",",
											"                        \"idControlType\",",
											"                        \"idAction\",",
											"                        \"idMedicalService\",",
											"                        \"idOccupationalDoctor\",",
											"                        \"privateDoctorName\",",
											"                        \"privateDoctorEnrollment\",",
											"                        \"diagnosis\",",
											"                        \"idAbsence\",",
											"                        \"idFile\",",
											"                        \"breakTime\",",
											"                        \"testDate\",",
											"                        \"testResult\",",
											"                        \"idParent\",",
											"                        \"idTrackingType\",",
											"                        \"pathologies\"",
											"                    ]",
											"                }",
											"            ]",
											"        },",
											"        \"id\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"idEmployee\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"date\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"idControlType\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"idAction\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"idMedicalService\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"idOccupationalDoctor\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"privateDoctorName\": {",
											"            \"type\": [\"string\", \"null\"]",
											"        },",
											"        \"privateDoctorEnrollment\": {",
											"            \"type\": [\"string\", \"null\"]",
											"        },",
											"        \"diagnosis\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"idAbsence\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"idFile\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"breakTime\": {",
											"            \"type\": \"integer\"",
											"        },",
											"        \"testDate\": {",
											"            \"type\": [\"string\", \"null\"]",
											"        },",
											"        \"testResult\": {",
											"            \"type\": [\"boolean\", \"null\"]",
											"        },",
											"        \"idParent\": {",
											"            \"type\": [\"integer\", \"null\"]",
											"        },",
											"        \"idTrackingType\": {",
											"            \"type\": [\"integer\", \"null\"]",
											"        },",
											"        \"pathologies\": {",
											"            \"type\": \"array\",",
											"            \"items\": [",
											"                {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"description\"",
											"                    ]",
											"                }",
											"            ]",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"tracking\",",
											"        \"id\",",
											"        \"idEmployee\",",
											"        \"date\",",
											"        \"idControlType\",",
											"        \"idAction\",",
											"        \"idMedicalService\",",
											"        \"idOccupationalDoctor\",",
											"        \"privateDoctorName\",",
											"        \"privateDoctorEnrollment\",",
											"        \"diagnosis\",",
											"        \"idAbsence\",",
											"        \"idFile\",",
											"        \"breakTime\",",
											"        \"testDate\",",
											"        \"testResult\",",
											"        \"idParent\",",
											"        \"idTrackingType\",",
											"        \"pathologies\"",
											"    ]",
											"};",
											"",
											"pm.test('Doctor Schema is valid', function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Verify idEmployee\", function () {",
											"    pm.expect(jsonData.idEmployee).is.to.equal(Number(idPhysicalPerson));",
											"});",
											"",
											"pm.test(\"Verify date\", function () {",
											"    pm.expect(jsonData.date).is.to.equal(\"2021-07-30T00:00:00\");",
											"});",
											"",
											"pm.test(\"Verify idControlType\", function () {",
											"    pm.expect(jsonData.idControlType).is.to.equal(Number(idControlType));",
											"});",
											"",
											"pm.test(\"Verify idAction\", function () {",
											"    pm.expect(jsonData.idAction).is.to.equal(Number(idAction));",
											"});",
											"",
											"pm.test(\"Verify idMedicalService\", function () {",
											"    pm.expect(jsonData.idMedicalService).is.to.equal(42);",
											"});",
											"",
											"pm.test(\"Verify idOccupationalDoctor\", function () {",
											"    pm.expect(jsonData.idOccupationalDoctor).is.to.equal(Number(idDoctors1));",
											"});",
											"",
											"pm.test(\"Verify privateDoctorName\", function () {",
											"    pm.expect(jsonData.privateDoctorName).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify privateDoctorEnrollment\", function () {",
											"    pm.expect(jsonData.privateDoctorEnrollment).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify diagnosis\", function () {",
											"    pm.expect(jsonData.diagnosis).is.to.equal(\"Gripe\");",
											"});",
											"",
											"pm.test(\"Verify idAbsence\", function () {",
											"    pm.expect(jsonData.idAbsence).is.to.equal(Number(idAbsence));",
											"});",
											"",
											"pm.test(\"Verify testDate\", function () {",
											"    pm.expect(jsonData.testDate).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify testResult\", function () {",
											"    pm.expect(jsonData.testResult).is.to.equal(null);",
											"});",
											"",
											"pm.test(\"Verify idParent\", function () {",
											"    pm.expect(jsonData.idParent).is.to.equal(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/absences/{{IDAbsence}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"absences",
										"{{IDAbsence}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "106.3.EliminarDatosAuxiliares",
					"item": [
						{
							"name": "106.3.1.MedicalControlTracking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControlTracking}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControlTracking}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.3.2.MedicalControl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/{{IDMedicalControl}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"{{IDMedicalControl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.3.3.Absences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI_Absences}}/absences/{{IDAbsence}}",
									"host": [
										"{{URI_Absences}}"
									],
									"path": [
										"absences",
										"{{IDAbsence}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "106.3.4.MedicalControlByAbsences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than \" + postman.getEnvironmentVariable(\"Timeout\") + \" ms\" , function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(Number(postman.getEnvironmentVariable(\"Timeout\")));",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Autenticacion}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-Tenant-Id",
										"type": "text",
										"value": "{{Tenant}}"
									}
								],
								"url": {
									"raw": "{{URI}}/medical-controls/absences/{{IDAbsence}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"medical-controls",
										"absences",
										"{{IDAbsence}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}